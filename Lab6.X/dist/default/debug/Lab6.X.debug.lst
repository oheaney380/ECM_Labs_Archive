

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Tue Mar 06 15:27:33 2018

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    16                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    17  0000                     _LATA	set	3977
    18  0000                     _LATAbits	set	3977
    19  0000                     _LATC	set	3979
    20  0000                     _LATCbits	set	3979
    21  0000                     _LATD	set	3980
    22  0000                     _LATDbits	set	3980
    23  0000                     _TRISAbits	set	3986
    24  0000                     _TRISC	set	3988
    25  0000                     _TRISCbits	set	3988
    26  0000                     _TRISDbits	set	3989
    27  0000                     _ADCON0	set	4034
    28  0000                     _ADCON1	set	4033
    29  0000                     _ADCON2	set	4032
    30  0000                     _ANSEL0bits	set	4024
    31  0000                     _BAUDCONbits	set	4010
    32  0000                     _OSCCON	set	4051
    33  0000                     _OSCCONbits	set	4051
    34  0000                     _PIR1bits	set	3998
    35  0000                     _RCREG	set	4014
    36  0000                     _RCSTAbits	set	4011
    37  0000                     _SPBRG	set	4015
    38  0000                     _SPBRGH	set	4016
    39  0000                     _TXREG	set	4013
    40  0000                     _TXSTAbits	set	4012
    41                           
    42                           ; #config settings
    43  0000                     
    44                           	psect	cinit
    45  001A58                     __pcinit:
    46                           	opt stack 0
    47  001A58                     start_initialization:
    48                           	opt stack 0
    49  001A58                     __initialization:
    50                           	opt stack 0
    51                           
    52                           ; Clear objects allocated to COMRAM (40 bytes)
    53  001A58  EE00  F034         	lfsr	0,__pbssCOMRAM
    54  001A5C  0E28               	movlw	40
    55  001A5E                     clear_0:
    56  001A5E  6AEE               	clrf	postinc0,c
    57  001A60  06E8               	decf	wreg,f,c
    58  001A62  E1FD               	bnz	clear_0
    59  001A64                     end_of_initialization:
    60                           	opt stack 0
    61  001A64                     __end_of__initialization:
    62                           	opt stack 0
    63  001A64  0100               	movlb	0
    64  001A66  EF65  F00D         	goto	_main	;jump to C main() function
    65                           postinc0	equ	0xFEE
    66                           wreg	equ	0xFE8
    67                           
    68                           	psect	bssCOMRAM
    69  000034                     __pbssCOMRAM:
    70                           	opt stack 0
    71  000034                     main@F3837:
    72                           	opt stack 0
    73  000034                     	ds	40
    74                           postinc0	equ	0xFEE
    75                           wreg	equ	0xFE8
    76                           
    77                           	psect	cstackCOMRAM
    78  000001                     __pcstackCOMRAM:
    79                           	opt stack 0
    80  000001                     ??_LCDout:
    81  000001                     
    82                           ; 1 bytes @ 0x0
    83  000001                     	ds	3
    84  000004                     LCDout@number:
    85                           	opt stack 0
    86                           
    87                           ; 1 bytes @ 0x3
    88  000004                     	ds	1
    89  000005                     SendLCD@type:
    90                           	opt stack 0
    91                           
    92                           ; 1 bytes @ 0x4
    93  000005                     	ds	1
    94  000006                     SendLCD@Byte:
    95                           	opt stack 0
    96                           
    97                           ; 1 bytes @ 0x5
    98  000006                     	ds	1
    99  000007                     ??_LCD_Init:
   100  000007                     LCD_String@string:
   101                           	opt stack 0
   102                           
   103                           ; 2 bytes @ 0x6
   104  000007                     	ds	2
   105  000009                     main@buf:
   106                           	opt stack 0
   107                           
   108                           ; 40 bytes @ 0x8
   109  000009                     	ds	40
   110  000031                     _main$749:
   111                           	opt stack 0
   112                           
   113                           ; 1 bytes @ 0x30
   114  000031                     	ds	1
   115  000032                     main@i:
   116                           	opt stack 0
   117                           
   118                           ; 1 bytes @ 0x31
   119  000032                     	ds	1
   120  000033                     main@letter:
   121                           	opt stack 0
   122                           
   123                           ; 1 bytes @ 0x32
   124  000033                     	ds	1
   125                           postinc0	equ	0xFEE
   126                           wreg	equ	0xFE8
   127                           
   128 ;;
   129 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   130 ;;
   131 ;; *************** function _main *****************
   132 ;; Defined at:
   133 ;;		line 128 in file "main.c"
   134 ;; Parameters:    Size  Location     Type
   135 ;;		None
   136 ;; Auto vars:     Size  Location     Type
   137 ;;  buf            40    8[COMRAM] unsigned char [40]
   138 ;;  letter          1   50[COMRAM] unsigned char 
   139 ;;  i               1   49[COMRAM] unsigned char 
   140 ;; Return value:  Size  Location     Type
   141 ;;		None               void
   142 ;; Registers used:
   143 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   144 ;; Tracked objects:
   145 ;;		On entry : 0/0
   146 ;;		On exit  : 0/0
   147 ;;		Unchanged: 0/0
   148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   149 ;;      Params:         0       0       0       0
   150 ;;      Locals:        43       0       0       0
   151 ;;      Temps:          0       0       0       0
   152 ;;      Totals:        43       0       0       0
   153 ;;Total ram usage:       43 bytes
   154 ;; Hardware stack levels required when called:    4
   155 ;; This function calls:
   156 ;;		_LCD_Init
   157 ;;		_LCD_String
   158 ;;		_getCharSerial
   159 ;; This function is called by:
   160 ;;		Startup code after reset
   161 ;; This function uses a non-reentrant model
   162 ;;
   163                           
   164                           	psect	text0
   165  001ACA                     __ptext0:
   166                           	opt stack 0
   167  001ACA                     _main:
   168                           	opt stack 27
   169                           
   170                           ;main.c: 130: char letter=0;
   171                           
   172                           ;incstack = 0
   173  001ACA  0E00               	movlw	0
   174  001ACC  6E33               	movwf	main@letter,c
   175                           
   176                           ;main.c: 131: char buf[40] ={0};
   177  001ACE  EE20  F034         	lfsr	2,main@F3837
   178  001AD2  EE10  F009         	lfsr	1,main@buf
   179  001AD6  0E27               	movlw	39
   180  001AD8                     u321:
   181  001AD8  CFDB FFE3          	movff	plusw2,plusw1
   182  001ADC  06E8               	decf	wreg,f,c
   183  001ADE  E2FC               	bc	u321
   184                           
   185                           ;main.c: 132: unsigned char i=0;
   186  001AE0  0E00               	movlw	0
   187  001AE2  6E32               	movwf	main@i,c
   188                           
   189                           ;main.c: 134: TRISC = TRISC || 0b11000000;
   190  001AE4  0E01               	movlw	1
   191  001AE6  6E31               	movwf	_main$749,c
   192  001AE8  5094               	movf	3988,w,c	;volatile
   193  001AEA  C031  FF94         	movff	_main$749,3988	;volatile
   194                           
   195                           ;main.c: 138: OSCCON = 0b11110010;
   196  001AEE  0EF2               	movlw	242
   197  001AF0  6ED3               	movwf	4051,c	;volatile
   198  001AF2                     l99:
   199  001AF2  A4D3               	btfss	4051,2,c	;volatile
   200  001AF4  D7FE               	goto	l99
   201                           
   202                           ;main.c: 141: SPBRG=205;
   203  001AF6  0ECD               	movlw	205
   204  001AF8  6EAF               	movwf	4015,c	;volatile
   205                           
   206                           ;main.c: 142: SPBRGH=0;
   207  001AFA  0E00               	movlw	0
   208  001AFC  6EB0               	movwf	4016,c	;volatile
   209                           
   210                           ;main.c: 143: BAUDCONbits.BRG16=1;
   211  001AFE  86AA               	bsf	4010,3,c	;volatile
   212                           
   213                           ;main.c: 144: TXSTAbits.BRGH=1;
   214  001B00  84AC               	bsf	4012,2,c	;volatile
   215                           
   216                           ;main.c: 145: RCSTAbits.CREN=1;
   217  001B02  88AB               	bsf	4011,4,c	;volatile
   218                           
   219                           ;main.c: 146: RCSTAbits.SPEN=1;
   220  001B04  8EAB               	bsf	4011,7,c	;volatile
   221                           
   222                           ;main.c: 147: TXSTAbits.TXEN=1;
   223  001B06  8AAC               	bsf	4012,5,c	;volatile
   224                           
   225                           ;main.c: 148: TXSTAbits.SYNC=0;
   226  001B08  98AC               	bcf	4012,4,c	;volatile
   227                           
   228                           ;main.c: 149: RCSTAbits.RX9=0;
   229  001B0A  9CAB               	bcf	4011,6,c	;volatile
   230                           
   231                           ;main.c: 153: TRISAbits.RA3=1;
   232  001B0C  8692               	bsf	3986,3,c	;volatile
   233                           
   234                           ;main.c: 154: ANSEL0bits.ANS3=1;
   235  001B0E  86B8               	bsf	4024,3,c	;volatile
   236                           
   237                           ;main.c: 156: ADCON0=0b00001101;
   238  001B10  0E0D               	movlw	13
   239  001B12  6EC2               	movwf	4034,c	;volatile
   240                           
   241                           ;main.c: 157: ADCON1=0b00000000;
   242  001B14  0E00               	movlw	0
   243  001B16  6EC1               	movwf	4033,c	;volatile
   244                           
   245                           ;main.c: 159: ADCON2=0b10101011;
   246  001B18  0EAB               	movlw	171
   247  001B1A  6EC0               	movwf	4032,c	;volatile
   248                           
   249                           ;main.c: 161: LCD_Init();
   250  001B1C  EC1C  F00E         	call	_LCD_Init	;wreg free
   251  001B20                     l1030:
   252                           
   253                           ;main.c: 164: letter=getCharSerial();
   254  001B20  EC21  F00D         	call	_getCharSerial	;wreg free
   255  001B24  6E33               	movwf	main@letter,c
   256                           
   257                           ;main.c: 165: if(letter==0x02){
   258  001B26  0E02               	movlw	2
   259  001B28  1833               	xorwf	main@letter,w,c
   260  001B2A  B4D8               	btfsc	status,2,c
   261  001B2C  D013               	goto	l1042
   262  001B2E  D7F8               	goto	l1030
   263  001B30                     l1034:
   264                           
   265                           ;main.c: 167: if(letter!=0x03){
   266  001B30  0E03               	movlw	3
   267  001B32  1833               	xorwf	main@letter,w,c
   268  001B34  B4D8               	btfsc	status,2,c
   269  001B36  D00E               	goto	l1042
   270                           
   271                           ;main.c: 168: letter=getCharSerial();
   272  001B38  EC21  F00D         	call	_getCharSerial	;wreg free
   273  001B3C  6E33               	movwf	main@letter,c
   274                           
   275                           ;main.c: 169: buf[i]=letter;
   276  001B3E  5032               	movf	main@i,w,c
   277  001B40  0D01               	mullw	1
   278  001B42  0E09               	movlw	low main@buf
   279  001B44  24F3               	addwf	prodl,w,c
   280  001B46  6ED9               	movwf	fsr2l,c
   281  001B48  0E00               	movlw	high main@buf
   282  001B4A  20F4               	addwfc	prodh,w,c
   283  001B4C  6EDA               	movwf	fsr2h,c
   284  001B4E  C033  FFDF         	movff	main@letter,indf2
   285                           
   286                           ;main.c: 170: i++;
   287  001B52  2A32               	incf	main@i,f,c
   288  001B54                     l1042:
   289  001B54  0E03               	movlw	3
   290  001B56  1833               	xorwf	main@letter,w,c
   291  001B58  A4D8               	btfss	status,2,c
   292  001B5A  D7EA               	goto	l1034
   293                           
   294                           ;main.c: 171: }
   295                           ;main.c: 172: }
   296                           ;main.c: 173: LCD_String(buf);
   297  001B5C  0E09               	movlw	low main@buf
   298  001B5E  6E07               	movwf	LCD_String@string,c
   299  001B60  0E00               	movlw	high main@buf
   300  001B62  6E08               	movwf	LCD_String@string+1,c
   301  001B64  EC4D  F00D         	call	_LCD_String	;wreg free
   302                           
   303                           ;main.c: 174: letter=0;
   304  001B68  0E00               	movlw	0
   305  001B6A  6E33               	movwf	main@letter,c
   306                           
   307                           ;main.c: 175: i=0;
   308  001B6C  0E00               	movlw	0
   309  001B6E  6E32               	movwf	main@i,c
   310  001B70  D7D7               	goto	l1030
   311  001B72                     __end_of_main:
   312                           	opt stack 0
   313                           prodh	equ	0xFF4
   314                           prodl	equ	0xFF3
   315                           postinc0	equ	0xFEE
   316                           wreg	equ	0xFE8
   317                           plusw1	equ	0xFE3
   318                           indf2	equ	0xFDF
   319                           plusw2	equ	0xFDB
   320                           fsr2h	equ	0xFDA
   321                           fsr2l	equ	0xFD9
   322                           status	equ	0xFD8
   323                           
   324 ;; *************** function _getCharSerial *****************
   325 ;; Defined at:
   326 ;;		line 111 in file "main.c"
   327 ;; Parameters:    Size  Location     Type
   328 ;;		None
   329 ;; Auto vars:     Size  Location     Type
   330 ;;		None
   331 ;; Return value:  Size  Location     Type
   332 ;;                  1    wreg      unsigned char 
   333 ;; Registers used:
   334 ;;		wreg, status,2
   335 ;; Tracked objects:
   336 ;;		On entry : 0/0
   337 ;;		On exit  : 0/0
   338 ;;		Unchanged: 0/0
   339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   340 ;;      Params:         0       0       0       0
   341 ;;      Locals:         0       0       0       0
   342 ;;      Temps:          0       0       0       0
   343 ;;      Totals:         0       0       0       0
   344 ;;Total ram usage:        0 bytes
   345 ;; Hardware stack levels used:    1
   346 ;; This function calls:
   347 ;;		Nothing
   348 ;; This function is called by:
   349 ;;		_main
   350 ;; This function uses a non-reentrant model
   351 ;;
   352                           
   353                           	psect	text1
   354  001A42                     __ptext1:
   355                           	opt stack 0
   356  001A42                     _getCharSerial:
   357                           	opt stack 30
   358  001A42                     l83:
   359  001A42  AA9E               	btfss	3998,5,c	;volatile
   360  001A44  D7FE               	goto	l83
   361                           
   362                           ;main.c: 113: return RCREG;
   363  001A46  50AE               	movf	4014,w,c	;volatile
   364  001A48  0012               	return	
   365  001A4A                     __end_of_getCharSerial:
   366                           	opt stack 0
   367                           prodh	equ	0xFF4
   368                           prodl	equ	0xFF3
   369                           postinc0	equ	0xFEE
   370                           wreg	equ	0xFE8
   371                           plusw1	equ	0xFE3
   372                           indf2	equ	0xFDF
   373                           plusw2	equ	0xFDB
   374                           fsr2h	equ	0xFDA
   375                           fsr2l	equ	0xFD9
   376                           status	equ	0xFD8
   377                           
   378 ;; *************** function _LCD_String *****************
   379 ;; Defined at:
   380 ;;		line 94 in file "main.c"
   381 ;; Parameters:    Size  Location     Type
   382 ;;  string          2    6[COMRAM] PTR unsigned char 
   383 ;;		 -> main@buf(40), 
   384 ;; Auto vars:     Size  Location     Type
   385 ;;		None
   386 ;; Return value:  Size  Location     Type
   387 ;;		None               void
   388 ;; Registers used:
   389 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   390 ;; Tracked objects:
   391 ;;		On entry : 0/0
   392 ;;		On exit  : 0/0
   393 ;;		Unchanged: 0/0
   394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   395 ;;      Params:         2       0       0       0
   396 ;;      Locals:         0       0       0       0
   397 ;;      Temps:          0       0       0       0
   398 ;;      Totals:         2       0       0       0
   399 ;;Total ram usage:        2 bytes
   400 ;; Hardware stack levels used:    1
   401 ;; Hardware stack levels required when called:    3
   402 ;; This function calls:
   403 ;;		_SendLCD
   404 ;; This function is called by:
   405 ;;		_main
   406 ;; This function uses a non-reentrant model
   407 ;;
   408                           
   409                           	psect	text2
   410  001A9A                     __ptext2:
   411                           	opt stack 0
   412  001A9A                     _LCD_String:
   413                           	opt stack 27
   414                           
   415                           ;main.c: 96: while(*string != 0){
   416                           
   417                           ;incstack = 0
   418  001A9A  D00F               	goto	l974
   419  001A9C                     l968:
   420                           
   421                           ;main.c: 99: SendLCD(*string++,1);
   422  001A9C  0E01               	movlw	1
   423  001A9E  6E05               	movwf	SendLCD@type,c
   424  001AA0  C007  FFD9         	movff	LCD_String@string,fsr2l
   425  001AA4  C008  FFDA         	movff	LCD_String@string+1,fsr2h
   426  001AA8  50DF               	movf	indf2,w,c
   427  001AAA  EC35  F00D         	call	_SendLCD
   428  001AAE  4A07               	infsnz	LCD_String@string,f,c
   429  001AB0  2A08               	incf	LCD_String@string+1,f,c
   430                           
   431                           ;main.c: 100: _delay((unsigned long)((50)*(8000000/4000000.0)));
   432  001AB2  0E21               	movlw	33
   433  001AB4                     u377:
   434  001AB4  2EE8               	decfsz	wreg,f,c
   435  001AB6  D7FE               	goto	u377
   436  001AB8  F000               	nop	
   437  001ABA                     l974:
   438  001ABA  C007  FFD9         	movff	LCD_String@string,fsr2l
   439  001ABE  C008  FFDA         	movff	LCD_String@string+1,fsr2h
   440  001AC2  50DF               	movf	indf2,w,c
   441  001AC4  B4D8               	btfsc	status,2,c
   442  001AC6  0012               	return	
   443  001AC8  D7E9               	goto	l968
   444  001ACA                     __end_of_LCD_String:
   445                           	opt stack 0
   446                           prodh	equ	0xFF4
   447                           prodl	equ	0xFF3
   448                           postinc0	equ	0xFEE
   449                           wreg	equ	0xFE8
   450                           plusw1	equ	0xFE3
   451                           indf2	equ	0xFDF
   452                           plusw2	equ	0xFDB
   453                           fsr2h	equ	0xFDA
   454                           fsr2l	equ	0xFD9
   455                           status	equ	0xFD8
   456                           
   457 ;; *************** function _LCD_Init *****************
   458 ;; Defined at:
   459 ;;		line 49 in file "main.c"
   460 ;; Parameters:    Size  Location     Type
   461 ;;		None
   462 ;; Auto vars:     Size  Location     Type
   463 ;;		None
   464 ;; Return value:  Size  Location     Type
   465 ;;		None               void
   466 ;; Registers used:
   467 ;;		wreg, status,2, status,0, cstack
   468 ;; Tracked objects:
   469 ;;		On entry : 0/0
   470 ;;		On exit  : 0/0
   471 ;;		Unchanged: 0/0
   472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   473 ;;      Params:         0       0       0       0
   474 ;;      Locals:         0       0       0       0
   475 ;;      Temps:          1       0       0       0
   476 ;;      Totals:         1       0       0       0
   477 ;;Total ram usage:        1 bytes
   478 ;; Hardware stack levels used:    1
   479 ;; Hardware stack levels required when called:    3
   480 ;; This function calls:
   481 ;;		_LCDout
   482 ;;		_SendLCD
   483 ;; This function is called by:
   484 ;;		_main
   485 ;; This function uses a non-reentrant model
   486 ;;
   487                           
   488                           	psect	text3
   489  001C38                     __ptext3:
   490                           	opt stack 0
   491  001C38                     _LCD_Init:
   492                           	opt stack 27
   493                           
   494                           ;main.c: 51: LATA=0;
   495                           
   496                           ;incstack = 0
   497  001C38  0E00               	movlw	0
   498  001C3A  6E89               	movwf	3977,c	;volatile
   499                           
   500                           ;main.c: 52: LATC=0;
   501  001C3C  0E00               	movlw	0
   502  001C3E  6E8B               	movwf	3979,c	;volatile
   503                           
   504                           ;main.c: 53: LATD=0;
   505  001C40  0E00               	movlw	0
   506  001C42  6E8C               	movwf	3980,c	;volatile
   507                           
   508                           ;main.c: 55: TRISAbits.RA6=0;
   509  001C44  9C92               	bcf	3986,6,c	;volatile
   510                           
   511                           ;main.c: 56: TRISCbits.RC0=0;
   512  001C46  9094               	bcf	3988,0,c	;volatile
   513                           
   514                           ;main.c: 57: TRISCbits.RC1=0;
   515  001C48  9294               	bcf	3988,1,c	;volatile
   516                           
   517                           ;main.c: 58: TRISCbits.RC2=0;
   518  001C4A  9494               	bcf	3988,2,c	;volatile
   519                           
   520                           ;main.c: 59: TRISDbits.RD0=0;
   521  001C4C  9095               	bcf	3989,0,c	;volatile
   522                           
   523                           ;main.c: 60: TRISDbits.RD1=0;
   524  001C4E  9295               	bcf	3989,1,c	;volatile
   525                           
   526                           ;main.c: 62: _delay((unsigned long)((15)*(8000000/4000.0)));
   527  001C50  0E27               	movlw	39
   528  001C52  6E07               	movwf	??_LCD_Init& (0+255),c
   529  001C54  0EF5               	movlw	245
   530  001C56                     u387:
   531  001C56  2EE8               	decfsz	wreg,f,c
   532  001C58  D7FE               	goto	u387
   533  001C5A  2E07               	decfsz	??_LCD_Init& (0+255),f,c
   534  001C5C  D7FC               	goto	u387
   535  001C5E  F000               	nop	
   536                           
   537                           ;main.c: 63: LCDout(0b0011);
   538  001C60  0E03               	movlw	3
   539  001C62  ECB9  F00D         	call	_LCDout
   540                           
   541                           ;main.c: 64: _delay((unsigned long)((5)*(8000000/4000.0)));
   542  001C66  0E0D               	movlw	13
   543  001C68  6E07               	movwf	??_LCD_Init& (0+255),c
   544  001C6A  0EFC               	movlw	252
   545  001C6C                     u397:
   546  001C6C  2EE8               	decfsz	wreg,f,c
   547  001C6E  D7FE               	goto	u397
   548  001C70  2E07               	decfsz	??_LCD_Init& (0+255),f,c
   549  001C72  D7FC               	goto	u397
   550                           
   551                           ;main.c: 65: LCDout(0b0011);
   552  001C74  0E03               	movlw	3
   553  001C76  ECB9  F00D         	call	_LCDout
   554                           
   555                           ;main.c: 66: _delay((unsigned long)((200)*(8000000/4000000.0)));
   556  001C7A  0E85               	movlw	133
   557  001C7C                     u407:
   558  001C7C  2EE8               	decfsz	wreg,f,c
   559  001C7E  D7FE               	goto	u407
   560  001C80  F000               	nop	
   561                           
   562                           ;main.c: 67: LCDout(0b0011);
   563  001C82  0E03               	movlw	3
   564  001C84  ECB9  F00D         	call	_LCDout
   565                           
   566                           ;main.c: 68: _delay((unsigned long)((50)*(8000000/4000000.0)));
   567  001C88  0E21               	movlw	33
   568  001C8A                     u417:
   569  001C8A  2EE8               	decfsz	wreg,f,c
   570  001C8C  D7FE               	goto	u417
   571  001C8E  F000               	nop	
   572                           
   573                           ;main.c: 69: LCDout(0b0010);
   574  001C90  0E02               	movlw	2
   575  001C92  ECB9  F00D         	call	_LCDout
   576                           
   577                           ;main.c: 70: _delay((unsigned long)((50)*(8000000/4000000.0)));
   578  001C96  0E21               	movlw	33
   579  001C98                     u427:
   580  001C98  2EE8               	decfsz	wreg,f,c
   581  001C9A  D7FE               	goto	u427
   582  001C9C  F000               	nop	
   583                           
   584                           ;main.c: 73: SendLCD(0b00101000,0);
   585  001C9E  0E00               	movlw	0
   586  001CA0  6E05               	movwf	SendLCD@type,c
   587  001CA2  0E28               	movlw	40
   588  001CA4  EC35  F00D         	call	_SendLCD
   589                           
   590                           ;main.c: 74: _delay((unsigned long)((50)*(8000000/4000000.0)));
   591  001CA8  0E21               	movlw	33
   592  001CAA                     u437:
   593  001CAA  2EE8               	decfsz	wreg,f,c
   594  001CAC  D7FE               	goto	u437
   595  001CAE  F000               	nop	
   596                           
   597                           ;main.c: 75: SendLCD(0b00001000,0);
   598  001CB0  0E00               	movlw	0
   599  001CB2  6E05               	movwf	SendLCD@type,c
   600  001CB4  0E08               	movlw	8
   601  001CB6  EC35  F00D         	call	_SendLCD
   602                           
   603                           ;main.c: 76: _delay((unsigned long)((50)*(8000000/4000000.0)));
   604  001CBA  0E21               	movlw	33
   605  001CBC                     u447:
   606  001CBC  2EE8               	decfsz	wreg,f,c
   607  001CBE  D7FE               	goto	u447
   608  001CC0  F000               	nop	
   609                           
   610                           ;main.c: 77: SendLCD(0b00000001,0);
   611  001CC2  0E00               	movlw	0
   612  001CC4  6E05               	movwf	SendLCD@type,c
   613  001CC6  0E01               	movlw	1
   614  001CC8  EC35  F00D         	call	_SendLCD
   615                           
   616                           ;main.c: 78: _delay((unsigned long)((5)*(8000000/4000.0)));
   617  001CCC  0E0D               	movlw	13
   618  001CCE  6E07               	movwf	??_LCD_Init& (0+255),c
   619  001CD0  0EFC               	movlw	252
   620  001CD2                     u457:
   621  001CD2  2EE8               	decfsz	wreg,f,c
   622  001CD4  D7FE               	goto	u457
   623  001CD6  2E07               	decfsz	??_LCD_Init& (0+255),f,c
   624  001CD8  D7FC               	goto	u457
   625                           
   626                           ;main.c: 79: SendLCD(0b00000110,0);
   627  001CDA  0E00               	movlw	0
   628  001CDC  6E05               	movwf	SendLCD@type,c
   629  001CDE  0E06               	movlw	6
   630  001CE0  EC35  F00D         	call	_SendLCD
   631                           
   632                           ;main.c: 80: _delay((unsigned long)((50)*(8000000/4000000.0)));
   633  001CE4  0E21               	movlw	33
   634  001CE6                     u467:
   635  001CE6  2EE8               	decfsz	wreg,f,c
   636  001CE8  D7FE               	goto	u467
   637  001CEA  F000               	nop	
   638                           
   639                           ;main.c: 81: SendLCD(0b00001100,0);
   640  001CEC  0E00               	movlw	0
   641  001CEE  6E05               	movwf	SendLCD@type,c
   642  001CF0  0E0C               	movlw	12
   643  001CF2  EC35  F00D         	call	_SendLCD
   644                           
   645                           ;main.c: 82: _delay((unsigned long)((50)*(8000000/4000000.0)));
   646  001CF6  0E21               	movlw	33
   647  001CF8                     u477:
   648  001CF8  2EE8               	decfsz	wreg,f,c
   649  001CFA  D7FE               	goto	u477
   650  001CFC  F000               	nop	
   651  001CFE  0012               	return		;funcret
   652  001D00                     __end_of_LCD_Init:
   653                           	opt stack 0
   654                           prodh	equ	0xFF4
   655                           prodl	equ	0xFF3
   656                           postinc0	equ	0xFEE
   657                           wreg	equ	0xFE8
   658                           plusw1	equ	0xFE3
   659                           indf2	equ	0xFDF
   660                           plusw2	equ	0xFDB
   661                           fsr2h	equ	0xFDA
   662                           fsr2l	equ	0xFD9
   663                           status	equ	0xFD8
   664                           
   665 ;; *************** function _SendLCD *****************
   666 ;; Defined at:
   667 ;;		line 38 in file "main.c"
   668 ;; Parameters:    Size  Location     Type
   669 ;;  Byte            1    wreg     unsigned char 
   670 ;;  type            1    4[COMRAM] unsigned char 
   671 ;; Auto vars:     Size  Location     Type
   672 ;;  Byte            1    5[COMRAM] unsigned char 
   673 ;; Return value:  Size  Location     Type
   674 ;;		None               void
   675 ;; Registers used:
   676 ;;		wreg, status,2, status,0, cstack
   677 ;; Tracked objects:
   678 ;;		On entry : 0/0
   679 ;;		On exit  : 0/0
   680 ;;		Unchanged: 0/0
   681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   682 ;;      Params:         1       0       0       0
   683 ;;      Locals:         1       0       0       0
   684 ;;      Temps:          0       0       0       0
   685 ;;      Totals:         2       0       0       0
   686 ;;Total ram usage:        2 bytes
   687 ;; Hardware stack levels used:    1
   688 ;; Hardware stack levels required when called:    2
   689 ;; This function calls:
   690 ;;		_LCDout
   691 ;; This function is called by:
   692 ;;		_LCD_Init
   693 ;;		_LCD_String
   694 ;;		_SetLine
   695 ;; This function uses a non-reentrant model
   696 ;;
   697                           
   698                           	psect	text4
   699  001A6A                     __ptext4:
   700                           	opt stack 0
   701  001A6A                     _SendLCD:
   702                           	opt stack 27
   703                           
   704                           ;incstack = 0
   705                           ;SendLCD@Byte stored from wreg
   706  001A6A  6E06               	movwf	SendLCD@Byte,c
   707                           
   708                           ;main.c: 41: LATAbits.LATA6=type;
   709  001A6C  B005               	btfsc	SendLCD@type,0,c
   710  001A6E  D002               	bra	u275
   711  001A70  9C89               	bcf	3977,6,c	;volatile
   712  001A72  D001               	bra	u276
   713  001A74                     u275:
   714  001A74  8C89               	bsf	3977,6,c	;volatile
   715  001A76                     u276:
   716                           
   717                           ;main.c: 43: LCDout((Byte&0xF0)>>4);
   718  001A76  3806               	swapf	SendLCD@Byte,w,c
   719  001A78  0B0F               	andlw	15
   720  001A7A  0B0F               	andlw	15
   721  001A7C  ECB9  F00D         	call	_LCDout
   722                           
   723                           ;main.c: 44: _delay((unsigned long)((10)*(8000000/4000000.0)));
   724  001A80  0E06               	movlw	6
   725  001A82                     u487:
   726  001A82  2EE8               	decfsz	wreg,f,c
   727  001A84  D7FE               	goto	u487
   728  001A86  D000               	nop2		;nop
   729                           
   730                           ;main.c: 46: LCDout(Byte&0x0F);
   731  001A88  5006               	movf	SendLCD@Byte,w,c
   732  001A8A  0B0F               	andlw	15
   733  001A8C  ECB9  F00D         	call	_LCDout
   734                           
   735                           ;main.c: 47: _delay((unsigned long)((50)*(8000000/4000000.0)));
   736  001A90  0E21               	movlw	33
   737  001A92                     u497:
   738  001A92  2EE8               	decfsz	wreg,f,c
   739  001A94  D7FE               	goto	u497
   740  001A96  F000               	nop	
   741  001A98  0012               	return		;funcret
   742  001A9A                     __end_of_SendLCD:
   743                           	opt stack 0
   744                           prodh	equ	0xFF4
   745                           prodl	equ	0xFF3
   746                           postinc0	equ	0xFEE
   747                           wreg	equ	0xFE8
   748                           plusw1	equ	0xFE3
   749                           indf2	equ	0xFDF
   750                           plusw2	equ	0xFDB
   751                           fsr2h	equ	0xFDA
   752                           fsr2l	equ	0xFD9
   753                           status	equ	0xFD8
   754                           
   755 ;; *************** function _LCDout *****************
   756 ;; Defined at:
   757 ;;		line 25 in file "main.c"
   758 ;; Parameters:    Size  Location     Type
   759 ;;  number          1    wreg     unsigned char 
   760 ;; Auto vars:     Size  Location     Type
   761 ;;  number          1    3[COMRAM] unsigned char 
   762 ;; Return value:  Size  Location     Type
   763 ;;		None               void
   764 ;; Registers used:
   765 ;;		wreg, status,2, status,0, cstack
   766 ;; Tracked objects:
   767 ;;		On entry : 0/0
   768 ;;		On exit  : 0/0
   769 ;;		Unchanged: 0/0
   770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   771 ;;      Params:         0       0       0       0
   772 ;;      Locals:         1       0       0       0
   773 ;;      Temps:          3       0       0       0
   774 ;;      Totals:         4       0       0       0
   775 ;;Total ram usage:        4 bytes
   776 ;; Hardware stack levels used:    1
   777 ;; Hardware stack levels required when called:    1
   778 ;; This function calls:
   779 ;;		_E_TOG
   780 ;; This function is called by:
   781 ;;		_SendLCD
   782 ;;		_LCD_Init
   783 ;; This function uses a non-reentrant model
   784 ;;
   785                           
   786                           	psect	text5
   787  001B72                     __ptext5:
   788                           	opt stack 0
   789  001B72                     _LCDout:
   790                           	opt stack 27
   791                           
   792                           ;incstack = 0
   793                           ;LCDout@number stored from wreg
   794  001B72  6E04               	movwf	LCDout@number,c
   795                           
   796                           ;main.c: 28: LATCbits.LATC1 = (number<<7)>>7;
   797  001B74  5004               	movf	LCDout@number,w,c
   798  001B76  6E01               	movwf	??_LCDout& (0+255),c
   799  001B78  6A02               	clrf	(??_LCDout+1)& (0+255),c
   800  001B7A  0E07               	movlw	7
   801  001B7C                     u205:
   802  001B7C  90D8               	bcf	status,0,c
   803  001B7E  3601               	rlcf	??_LCDout,f,c
   804  001B80  3602               	rlcf	??_LCDout+1,f,c
   805  001B82  2EE8               	decfsz	wreg,f,c
   806  001B84  D7FB               	goto	u205
   807  001B86  0E07               	movlw	7
   808  001B88  6E03               	movwf	(??_LCDout+2)& (0+255),c
   809  001B8A                     u215:
   810  001B8A  3402               	rlcf	??_LCDout+1,w,c
   811  001B8C  3202               	rrcf	??_LCDout+1,f,c
   812  001B8E  3201               	rrcf	??_LCDout,f,c
   813  001B90  2E03               	decfsz	(??_LCDout+2)& (0+255),f,c
   814  001B92  D7FB               	goto	u215
   815  001B94  4601               	rlncf	??_LCDout,f,c
   816  001B96  508B               	movf	3979,w,c	;volatile
   817  001B98  1801               	xorwf	??_LCDout,w,c
   818  001B9A  0BFD               	andlw	-3
   819  001B9C  1801               	xorwf	??_LCDout,w,c
   820  001B9E  6E8B               	movwf	3979,c	;volatile
   821                           
   822                           ;main.c: 29: LATCbits.LATC2 = (number<<6)>>7;
   823  001BA0  5004               	movf	LCDout@number,w,c
   824  001BA2  6E01               	movwf	??_LCDout& (0+255),c
   825  001BA4  6A02               	clrf	(??_LCDout+1)& (0+255),c
   826  001BA6  0E06               	movlw	6
   827  001BA8                     u225:
   828  001BA8  90D8               	bcf	status,0,c
   829  001BAA  3601               	rlcf	??_LCDout,f,c
   830  001BAC  3602               	rlcf	??_LCDout+1,f,c
   831  001BAE  2EE8               	decfsz	wreg,f,c
   832  001BB0  D7FB               	goto	u225
   833  001BB2  0E07               	movlw	7
   834  001BB4  6E03               	movwf	(??_LCDout+2)& (0+255),c
   835  001BB6                     u235:
   836  001BB6  3402               	rlcf	??_LCDout+1,w,c
   837  001BB8  3202               	rrcf	??_LCDout+1,f,c
   838  001BBA  3201               	rrcf	??_LCDout,f,c
   839  001BBC  2E03               	decfsz	(??_LCDout+2)& (0+255),f,c
   840  001BBE  D7FB               	goto	u235
   841  001BC0  4601               	rlncf	??_LCDout,f,c
   842  001BC2  4601               	rlncf	??_LCDout,f,c
   843  001BC4  508B               	movf	3979,w,c	;volatile
   844  001BC6  1801               	xorwf	??_LCDout,w,c
   845  001BC8  0BFB               	andlw	-5
   846  001BCA  1801               	xorwf	??_LCDout,w,c
   847  001BCC  6E8B               	movwf	3979,c	;volatile
   848                           
   849                           ;main.c: 30: LATDbits.LATD0 = (number<<5)>>7;
   850  001BCE  5004               	movf	LCDout@number,w,c
   851  001BD0  6E01               	movwf	??_LCDout& (0+255),c
   852  001BD2  6A02               	clrf	(??_LCDout+1)& (0+255),c
   853  001BD4  0E05               	movlw	5
   854  001BD6                     u245:
   855  001BD6  90D8               	bcf	status,0,c
   856  001BD8  3601               	rlcf	??_LCDout,f,c
   857  001BDA  3602               	rlcf	??_LCDout+1,f,c
   858  001BDC  2EE8               	decfsz	wreg,f,c
   859  001BDE  D7FB               	goto	u245
   860  001BE0  0E07               	movlw	7
   861  001BE2  6E03               	movwf	(??_LCDout+2)& (0+255),c
   862  001BE4                     u255:
   863  001BE4  3402               	rlcf	??_LCDout+1,w,c
   864  001BE6  3202               	rrcf	??_LCDout+1,f,c
   865  001BE8  3201               	rrcf	??_LCDout,f,c
   866  001BEA  2E03               	decfsz	(??_LCDout+2)& (0+255),f,c
   867  001BEC  D7FB               	goto	u255
   868  001BEE  508C               	movf	3980,w,c	;volatile
   869  001BF0  1801               	xorwf	??_LCDout,w,c
   870  001BF2  0BFE               	andlw	-2
   871  001BF4  1801               	xorwf	??_LCDout,w,c
   872  001BF6  6E8C               	movwf	3980,c	;volatile
   873                           
   874                           ;main.c: 31: LATDbits.LATD1 = (number<<4)>>7;
   875  001BF8  5004               	movf	LCDout@number,w,c
   876  001BFA  6E01               	movwf	??_LCDout& (0+255),c
   877  001BFC  6A02               	clrf	(??_LCDout+1)& (0+255),c
   878  001BFE  3A01               	swapf	??_LCDout,f,c
   879  001C00  3A02               	swapf	??_LCDout+1,f,c
   880  001C02  0EF0               	movlw	240
   881  001C04  1602               	andwf	??_LCDout+1,f,c
   882  001C06  5001               	movf	??_LCDout,w,c
   883  001C08  0B0F               	andlw	15
   884  001C0A  1202               	iorwf	??_LCDout+1,f,c
   885  001C0C  0EF0               	movlw	240
   886  001C0E  1601               	andwf	??_LCDout,f,c
   887  001C10  0E07               	movlw	7
   888  001C12  6E03               	movwf	(??_LCDout+2)& (0+255),c
   889  001C14                     u265:
   890  001C14  3402               	rlcf	??_LCDout+1,w,c
   891  001C16  3202               	rrcf	??_LCDout+1,f,c
   892  001C18  3201               	rrcf	??_LCDout,f,c
   893  001C1A  2E03               	decfsz	(??_LCDout+2)& (0+255),f,c
   894  001C1C  D7FB               	goto	u265
   895  001C1E  4601               	rlncf	??_LCDout,f,c
   896  001C20  508C               	movf	3980,w,c	;volatile
   897  001C22  1801               	xorwf	??_LCDout,w,c
   898  001C24  0BFD               	andlw	-3
   899  001C26  1801               	xorwf	??_LCDout,w,c
   900  001C28  6E8C               	movwf	3980,c	;volatile
   901                           
   902                           ;main.c: 32: E_TOG();
   903  001C2A  EC25  F00D         	call	_E_TOG	;wreg free
   904                           
   905                           ;main.c: 33: _delay((unsigned long)((5)*(8000000/4000000.0)));
   906  001C2E  0E03               	movlw	3
   907  001C30                     u507:
   908  001C30  2EE8               	decfsz	wreg,f,c
   909  001C32  D7FE               	goto	u507
   910  001C34  F000               	nop	
   911  001C36  0012               	return		;funcret
   912  001C38                     __end_of_LCDout:
   913                           	opt stack 0
   914                           prodh	equ	0xFF4
   915                           prodl	equ	0xFF3
   916                           postinc0	equ	0xFEE
   917                           wreg	equ	0xFE8
   918                           plusw1	equ	0xFE3
   919                           indf2	equ	0xFDF
   920                           plusw2	equ	0xFDB
   921                           fsr2h	equ	0xFDA
   922                           fsr2l	equ	0xFD9
   923                           status	equ	0xFD8
   924                           
   925 ;; *************** function _E_TOG *****************
   926 ;; Defined at:
   927 ;;		line 16 in file "main.c"
   928 ;; Parameters:    Size  Location     Type
   929 ;;		None
   930 ;; Auto vars:     Size  Location     Type
   931 ;;		None
   932 ;; Return value:  Size  Location     Type
   933 ;;		None               void
   934 ;; Registers used:
   935 ;;		wreg
   936 ;; Tracked objects:
   937 ;;		On entry : 0/0
   938 ;;		On exit  : 0/0
   939 ;;		Unchanged: 0/0
   940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   941 ;;      Params:         0       0       0       0
   942 ;;      Locals:         0       0       0       0
   943 ;;      Temps:          0       0       0       0
   944 ;;      Totals:         0       0       0       0
   945 ;;Total ram usage:        0 bytes
   946 ;; Hardware stack levels used:    1
   947 ;; This function calls:
   948 ;;		Nothing
   949 ;; This function is called by:
   950 ;;		_LCDout
   951 ;; This function uses a non-reentrant model
   952 ;;
   953                           
   954                           	psect	text6
   955  001A4A                     __ptext6:
   956                           	opt stack 0
   957  001A4A                     _E_TOG:
   958                           	opt stack 27
   959                           
   960                           ;main.c: 19: LATCbits.LATC0=1;
   961                           
   962                           ;incstack = 0
   963  001A4A  808B               	bsf	3979,0,c	;volatile
   964                           
   965                           ;main.c: 20: _delay((unsigned long)((5)*(8000000/4000000.0)));
   966  001A4C  0E03               	movlw	3
   967  001A4E                     u517:
   968  001A4E  2EE8               	decfsz	wreg,f,c
   969  001A50  D7FE               	goto	u517
   970  001A52  F000               	nop	
   971                           
   972                           ;main.c: 21: LATCbits.LATC0=0;
   973  001A54  908B               	bcf	3979,0,c	;volatile
   974  001A56  0012               	return		;funcret
   975  001A58                     __end_of_E_TOG:
   976                           	opt stack 0
   977  0000                     prodh	equ	0xFF4
   978                           prodl	equ	0xFF3
   979                           postinc0	equ	0xFEE
   980                           wreg	equ	0xFE8
   981                           plusw1	equ	0xFE3
   982                           indf2	equ	0xFDF
   983                           plusw2	equ	0xFDB
   984                           fsr2h	equ	0xFDA
   985                           fsr2l	equ	0xFD9
   986                           status	equ	0xFD8
   987                           prodh	equ	0xFF4
   988                           prodl	equ	0xFF3
   989                           postinc0	equ	0xFEE
   990                           wreg	equ	0xFE8
   991                           plusw1	equ	0xFE3
   992                           indf2	equ	0xFDF
   993                           plusw2	equ	0xFDB
   994                           fsr2h	equ	0xFDA
   995                           fsr2l	equ	0xFD9
   996                           status	equ	0xFD8
   997                           
   998                           	psect	rparam
   999  0000                     prodh	equ	0xFF4
  1000                           prodl	equ	0xFF3
  1001                           postinc0	equ	0xFEE
  1002                           wreg	equ	0xFE8
  1003                           plusw1	equ	0xFE3
  1004                           indf2	equ	0xFDF
  1005                           plusw2	equ	0xFDB
  1006                           fsr2h	equ	0xFDA
  1007                           fsr2l	equ	0xFD9
  1008                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         40
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     51      91
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           239      0       0

Pointer List with Targets:

    LCD_String@string	PTR unsigned char  size(2) Largest target is 40
		 -> main@buf(COMRAM[40]), 


Critical Paths under _main in COMRAM

    _main->_LCD_String
    _LCD_String->_SendLCD
    _LCD_Init->_SendLCD
    _SendLCD->_LCDout

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                43    43      0    1719
                                              8 COMRAM    43    43      0
                           _LCD_Init
                         _LCD_String
                      _getCharSerial
 ---------------------------------------------------------------------------------
 (1) _getCharSerial                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCD_String                                           2     0      2     775
                                              6 COMRAM     2     0      2
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             1     1      0     754
                                              6 COMRAM     1     1      0
                             _LCDout
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _SendLCD                                              2     1      1     666
                                              4 COMRAM     2     1      1
                             _LCDout
 ---------------------------------------------------------------------------------
 (3) _LCDout                                               4     4      0      88
                                              0 COMRAM     4     4      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (4) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_Init
     _LCDout
       _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
   _LCD_String
     _SendLCD
       _LCDout
         _E_TOG
   _getCharSerial

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2EE      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2            EF      0       0       8        0.0%
BANK2               EF      0       0       9        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0       0       4        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     33      5B       1       95.8%
BITSFR_5             0      0       0      40        0.0%
SFR_5                0      0       0      40        0.0%
BITSFR_4             0      0       0      40        0.0%
SFR_4                0      0       0      40        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      5B       5        0.0%
DATA                 0      0      5B      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Tue Mar 06 15:27:33 2018

                     l83 1A42                       l99 1AF2              ?_LCD_String 0007  
                    l974 1ABA                      l968 1A9C                      u205 1B7C  
                    u215 1B8A                      u225 1BA8                      u321 1AD8  
                    u235 1BB6                      u245 1BD6                      u255 1BE4  
                    u407 1C7C                      u265 1C14                      u417 1C8A  
                    u507 1C30                      u275 1A74                      u427 1C98  
                    u276 1A76                      u517 1A4E                      u437 1CAA  
                    u447 1CBC                      u457 1CD2                      u377 1AB4  
                    u467 1CE6                      u387 1C56                      u477 1CF8  
                    u397 1C6C                      u487 1A82                      u497 1A92  
                    prod 000FF3                      wreg 000FE8                     l1030 1B20  
                   l1034 1B30                     l1042 1B54                     _LATA 000F89  
                   _LATC 000F8B                     _LATD 000F8C                     _main 1ACA  
                   fsr2h 000FDA                     indf2 000FDF                     fsr2l 000FD9  
                   prodl 000FF3                     start 0002             ___param_bank 000010  
        __end_of_SendLCD 1A9A         __end_of_LCD_Init 1D00                    ?_main 0001  
                  _RCREG 000FAE                    _E_TOG 1A4A                    _SPBRG 000FAF  
                  _TRISC 000F94                    _TXREG 000FAD                    main@i 0032  
                  plusw1 000FE3                    plusw2 000FDB                    status 000FD8  
    __size_of_LCD_String 0030          __initialization 1A58             __end_of_main 1B72  
         __CFG_OSC$IRCIO 000000         LCD_String@string 0007                   ??_main 0009  
          __activetblptr 000000                   ?_E_TOG 0001                   _ADCON0 000FC2  
                 _ADCON1 000FC1                   _ADCON2 000FC0           __CFG_WDTEN$OFF 000000  
                 _LCDout 1B72              SendLCD@Byte 0006                   _OSCCON 000FD3  
  __end_of_getCharSerial 1A4A                   _SPBRGH 000FB0              SendLCD@type 0005  
              ??_SendLCD 0006                   clear_0 1A5E               __accesstop 0060  
__end_of__initialization 1A64                ?_LCD_Init 0001            ___rparam_used 000001  
          __end_of_E_TOG 1A58           __pcstackCOMRAM 0001             ??_LCD_String 0009  
                ??_E_TOG 0001                  ?_LCDout 0001               ??_LCD_Init 0007  
     __end_of_LCD_String 1ACA          __size_of_LCDout 00C6                  _SendLCD 1A6A  
                __Hparam 0000                  __Lparam 0000                  __pcinit 1A58  
                __ramtop 0300                  __ptext0 1ACA                  __ptext1 1A42  
                __ptext2 1A9A                  __ptext3 1C38                  __ptext4 1A6A  
                __ptext5 1B72                  __ptext6 1A4A             LCDout@number 0004  
                main@buf 0009     end_of_initialization 1A64                _RCSTAbits 000FAB  
                postinc0 000FEE                _TRISAbits 000F92                _TRISCbits 000F94  
              _TRISDbits 000F95           __end_of_LCDout 1C38                _TXSTAbits 000FAC  
             main@letter 0033        __size_of_LCD_Init 00C8              _BAUDCONbits 000FAA  
 __size_of_getCharSerial 0008      start_initialization 1A58                 ??_LCDout 0001  
            __pbssCOMRAM 0034            _getCharSerial 1A42                 ?_SendLCD 0005  
         __size_of_E_TOG 000E           ?_getCharSerial 0001                 _LCD_Init 1C38  
               _LATAbits 000F89                 _LATCbits 000F8B                 _LATDbits 000F8C  
               _PIR1bits 000F9E                main@F3837 0034                 __Hrparam 0000  
       __size_of_SendLCD 0030                 __Lrparam 0000               _ANSEL0bits 000FB8  
               _main$749 0031          ??_getCharSerial 0001            __size_of_main 00A8  
             _LCD_String 1A9A               _OSCCONbits 000FD3  
