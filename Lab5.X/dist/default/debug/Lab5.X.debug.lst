

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Tue Feb 20 11:50:47 2018

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
     7                           	psect	text0,global,reloc=2,class=CODE,delta=1
     8                           	psect	text1,global,reloc=2,class=CODE,delta=1
     9                           	psect	text2,global,reloc=2,class=CODE,delta=1
    10                           	psect	text3,global,reloc=2,class=CODE,delta=1
    11                           	psect	text4,global,reloc=2,class=CODE,delta=1
    12                           	psect	text5,global,reloc=2,class=CODE,delta=1
    13                           	psect	text6,global,reloc=2,class=CODE,delta=1
    14                           	psect	text7,global,reloc=2,class=CODE,delta=1
    15                           	psect	text8,global,reloc=2,class=CODE,delta=1
    16                           	psect	text9,global,reloc=2,class=CODE,delta=1
    17                           	psect	text10,global,reloc=2,class=CODE,delta=1
    18                           	psect	text11,global,reloc=2,class=CODE,delta=1
    19                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    20                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    21  0000                     _LATB	set	3978
    22  0000                     _PTCON0	set	3967
    23  0000                     _PTCON1	set	3966
    24  0000                     _PTPERH	set	3962
    25  0000                     _PTPERL	set	3963
    26  0000                     _PWMCON0	set	3951
    27  0000                     _PWMCON1	set	3950
    28  0000                     _TRISAbits	set	3986
    29  0000                     _TRISBbits	set	3987
    30  0000                     _PDC0H	set	3960
    31  0000                     _PDC0L	set	3961
    32  0000                     _PDC1H	set	3958
    33  0000                     _PDC1L	set	3959
    34  0000                     _ADCON0	set	4034
    35  0000                     _ADCON1	set	4033
    36  0000                     _ADCON2	set	4032
    37  0000                     _ANSEL0bits	set	4024
    38  0000                     _OSCCON	set	4051
    39  0000                     _OSCCONbits	set	4051
    40                           
    41                           ; #config settings
    42  0000                     
    43                           	psect	cinit
    44  0017E0                     __pcinit:
    45                           	opt stack 0
    46  0017E0                     start_initialization:
    47                           	opt stack 0
    48  0017E0                     __initialization:
    49                           	opt stack 0
    50  0017E0                     end_of_initialization:
    51                           	opt stack 0
    52  0017E0                     __end_of__initialization:
    53                           	opt stack 0
    54  0017E0  0100               	movlb	0
    55  0017E2  EF43  F00D         	goto	_main	;jump to C main() function
    56                           
    57                           	psect	cstackCOMRAM
    58  000001                     __pcstackCOMRAM:
    59                           	opt stack 0
    60  000001                     ??_delay_s:
    61  000001                     ?___wmul:
    62                           	opt stack 0
    63  000001                     ___wmul@multiplier:
    64                           	opt stack 0
    65                           
    66                           ; 2 bytes @ 0x0
    67  000001                     	ds	2
    68  000003                     delay_s@seconds:
    69                           	opt stack 0
    70  000003                     ___wmul@multiplicand:
    71                           	opt stack 0
    72                           
    73                           ; 2 bytes @ 0x2
    74  000003                     	ds	1
    75  000004                     delay_s@i:
    76                           	opt stack 0
    77                           
    78                           ; 2 bytes @ 0x3
    79  000004                     	ds	1
    80  000005                     ___wmul@product:
    81                           	opt stack 0
    82                           
    83                           ; 2 bytes @ 0x4
    84  000005                     	ds	1
    85  000006                     delay_s@j:
    86                           	opt stack 0
    87                           
    88                           ; 2 bytes @ 0x5
    89  000006                     	ds	1
    90  000007                     ?___awdiv:
    91                           	opt stack 0
    92  000007                     ___awdiv@dividend:
    93                           	opt stack 0
    94                           
    95                           ; 2 bytes @ 0x6
    96  000007                     	ds	2
    97  000009                     ___awdiv@divisor:
    98                           	opt stack 0
    99                           
   100                           ; 2 bytes @ 0x8
   101  000009                     	ds	2
   102  00000B                     ___awdiv@counter:
   103                           	opt stack 0
   104                           
   105                           ; 1 bytes @ 0xA
   106  00000B                     	ds	1
   107  00000C                     ___awdiv@sign:
   108                           	opt stack 0
   109                           
   110                           ; 1 bytes @ 0xB
   111  00000C                     	ds	1
   112  00000D                     ___awdiv@quotient:
   113                           	opt stack 0
   114                           
   115                           ; 2 bytes @ 0xC
   116  00000D                     	ds	2
   117  00000F                     setMotorPWM@m:
   118                           	opt stack 0
   119                           
   120                           ; 2 bytes @ 0xE
   121  00000F                     	ds	2
   122  000011                     ??_setMotorPWM:
   123                           
   124                           ; 0 bytes @ 0x10
   125  000011                     	ds	3
   126  000014                     setMotorPWM@PWMduty:
   127                           	opt stack 0
   128                           
   129                           ; 2 bytes @ 0x13
   130  000014                     	ds	2
   131  000016                     setSingleMotorFullSpeed@m:
   132                           	opt stack 0
   133  000016                     stopSingleMotor@m:
   134                           	opt stack 0
   135                           
   136                           ; 2 bytes @ 0x15
   137  000016                     	ds	2
   138  000018                     ??_setSingleMotorFullSpeed:
   139  000018                     ??_stopSingleMotor:
   140                           
   141                           ; 0 bytes @ 0x17
   142  000018                     	ds	1
   143  000019                     fullSpeed@m_L:
   144                           	opt stack 0
   145  000019                     stop@m_L:
   146                           	opt stack 0
   147  000019                     turnLeft@m_L:
   148                           	opt stack 0
   149  000019                     turnRight@m_L:
   150                           	opt stack 0
   151                           
   152                           ; 2 bytes @ 0x18
   153  000019                     	ds	2
   154  00001B                     fullSpeed@m_R:
   155                           	opt stack 0
   156  00001B                     stop@m_R:
   157                           	opt stack 0
   158  00001B                     turnLeft@m_R:
   159                           	opt stack 0
   160  00001B                     turnRight@m_R:
   161                           	opt stack 0
   162                           
   163                           ; 2 bytes @ 0x1A
   164  00001B                     	ds	2
   165  00001D                     ??_stop:
   166  00001D                     
   167                           ; 0 bytes @ 0x1C
   168  00001D                     	ds	1
   169  00001E                     stop@temp:
   170                           	opt stack 0
   171                           
   172                           ; 2 bytes @ 0x1D
   173  00001E                     	ds	2
   174  000020                     stop@temp2:
   175                           	opt stack 0
   176                           
   177                           ; 2 bytes @ 0x1F
   178  000020                     	ds	2
   179  000022                     stop@i:
   180                           	opt stack 0
   181                           
   182                           ; 2 bytes @ 0x21
   183  000022                     	ds	2
   184  000024                     main@motorL:
   185                           	opt stack 0
   186                           
   187                           ; 9 bytes @ 0x23
   188  000024                     	ds	9
   189  00002D                     main@motorR:
   190                           	opt stack 0
   191                           
   192                           ; 9 bytes @ 0x2C
   193  00002D                     	ds	9
   194                           
   195 ;;
   196 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   197 ;;
   198 ;; *************** function _main *****************
   199 ;; Defined at:
   200 ;;		line 112 in file "main.c"
   201 ;; Parameters:    Size  Location     Type
   202 ;;		None
   203 ;; Auto vars:     Size  Location     Type
   204 ;;  motorR          9   44[COMRAM] struct DC_motor
   205 ;;  motorL          9   35[COMRAM] struct DC_motor
   206 ;; Return value:  Size  Location     Type
   207 ;;		None               void
   208 ;; Registers used:
   209 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   210 ;; Tracked objects:
   211 ;;		On entry : 0/0
   212 ;;		On exit  : 0/0
   213 ;;		Unchanged: 0/0
   214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   215 ;;      Params:         0       0       0       0
   216 ;;      Locals:        18       0       0       0
   217 ;;      Temps:          0       0       0       0
   218 ;;      Totals:        18       0       0       0
   219 ;;Total ram usage:       18 bytes
   220 ;; Hardware stack levels required when called:    4
   221 ;; This function calls:
   222 ;;		_delay_s
   223 ;;		_fullSpeed
   224 ;;		_initPWM
   225 ;;		_stop
   226 ;;		_turnLeft
   227 ;;		_turnRight
   228 ;; This function is called by:
   229 ;;		Startup code after reset
   230 ;; This function uses a non-reentrant model
   231 ;;
   232                           
   233                           	psect	text0
   234  001A86                     __ptext0:
   235                           	opt stack 0
   236  001A86                     _main:
   237                           	opt stack 27
   238                           
   239                           ;main.c: 113: OSCCON = 0x72;
   240                           
   241                           ;incstack = 0
   242  001A86  0E72               	movlw	114
   243  001A88  6ED3               	movwf	4051,c	;volatile
   244  001A8A                     l85:
   245  001A8A  A4D3               	btfss	4051,2,c	;volatile
   246  001A8C  D7FE               	goto	l85
   247                           
   248                           ;main.c: 117: TRISBbits.RB0=0;
   249  001A8E  9093               	bcf	3987,0,c	;volatile
   250                           
   251                           ;main.c: 118: TRISBbits.RB1=0;
   252  001A90  9293               	bcf	3987,1,c	;volatile
   253                           
   254                           ;main.c: 119: TRISBbits.RB2=0;
   255  001A92  9493               	bcf	3987,2,c	;volatile
   256                           
   257                           ;main.c: 120: TRISBbits.RB3=0;
   258  001A94  9693               	bcf	3987,3,c	;volatile
   259                           
   260                           ;main.c: 122: TRISAbits.RA3=1;
   261  001A96  8692               	bsf	3986,3,c	;volatile
   262                           
   263                           ;main.c: 123: ANSEL0bits.ANS3=1;
   264  001A98  86B8               	bsf	4024,3,c	;volatile
   265                           
   266                           ;main.c: 125: ADCON0=0b00001101;
   267  001A9A  0E0D               	movlw	13
   268  001A9C  6EC2               	movwf	4034,c	;volatile
   269                           
   270                           ;main.c: 126: ADCON1=0b00000000;
   271  001A9E  0E00               	movlw	0
   272  001AA0  6EC1               	movwf	4033,c	;volatile
   273                           
   274                           ;main.c: 128: ADCON2=0b10101011;
   275  001AA2  0EAB               	movlw	171
   276  001AA4  6EC0               	movwf	4032,c	;volatile
   277                           
   278                           ;main.c: 130: initPWM();
   279  001AA6  ECF3  F00B         	call	_initPWM	;wreg free
   280                           
   281                           ;main.c: 132: struct DC_motor motorL, motorR;
   282                           ;main.c: 133: motorL.power=0;
   283  001AAA  0E00               	movlw	0
   284  001AAC  6E24               	movwf	main@motorL,c
   285                           
   286                           ;main.c: 134: motorL.direction=1;
   287  001AAE  0E01               	movlw	1
   288  001AB0  6E25               	movwf	main@motorL+1,c
   289                           
   290                           ;main.c: 135: motorL.dutyLowByte=(unsigned char *)(&PDC0L);
   291  001AB2  0E79               	movlw	121
   292  001AB4  6E26               	movwf	main@motorL+2,c
   293  001AB6  0E0F               	movlw	15
   294  001AB8  6E27               	movwf	main@motorL+3,c
   295                           
   296                           ;main.c: 136: motorL.dutyHighByte=(unsigned char *)(&PDC0H);
   297  001ABA  0E78               	movlw	120
   298  001ABC  6E28               	movwf	main@motorL+4,c
   299  001ABE  0E0F               	movlw	15
   300  001AC0  6E29               	movwf	main@motorL+5,c
   301                           
   302                           ;main.c: 137: motorL.dir_pin=0;
   303  001AC2  0E00               	movlw	0
   304  001AC4  6E2A               	movwf	main@motorL+6,c
   305                           
   306                           ;main.c: 138: motorL.PWMperiod=199;
   307  001AC6  0E00               	movlw	0
   308  001AC8  6E2C               	movwf	main@motorL+8,c
   309  001ACA  0EC7               	movlw	199
   310  001ACC  6E2B               	movwf	main@motorL+7,c
   311                           
   312                           ;main.c: 140: motorR.power=0;
   313  001ACE  0E00               	movlw	0
   314  001AD0  6E2D               	movwf	main@motorR,c
   315                           
   316                           ;main.c: 141: motorR.direction=1;
   317  001AD2  0E01               	movlw	1
   318  001AD4  6E2E               	movwf	main@motorR+1,c
   319                           
   320                           ;main.c: 142: motorR.dutyLowByte=(unsigned char *)(&PDC1L);
   321  001AD6  0E77               	movlw	119
   322  001AD8  6E2F               	movwf	main@motorR+2,c
   323  001ADA  0E0F               	movlw	15
   324  001ADC  6E30               	movwf	main@motorR+3,c
   325                           
   326                           ;main.c: 143: motorR.dutyHighByte=(unsigned char *)(&PDC1H);
   327  001ADE  0E76               	movlw	118
   328  001AE0  6E31               	movwf	main@motorR+4,c
   329  001AE2  0E0F               	movlw	15
   330  001AE4  6E32               	movwf	main@motorR+5,c
   331                           
   332                           ;main.c: 144: motorR.dir_pin=2;
   333  001AE6  0E02               	movlw	2
   334  001AE8  6E33               	movwf	main@motorR+6,c
   335                           
   336                           ;main.c: 145: motorR.PWMperiod=199;
   337  001AEA  0E00               	movlw	0
   338  001AEC  6E35               	movwf	main@motorR+8,c
   339  001AEE  0EC7               	movlw	199
   340  001AF0  6E34               	movwf	main@motorR+7,c
   341  001AF2                     l1029:
   342                           
   343                           ;main.c: 148: stop(&motorL, &motorR);
   344  001AF2  0E24               	movlw	low main@motorL
   345  001AF4  6E19               	movwf	stop@m_L,c
   346  001AF6  0E00               	movlw	high main@motorL
   347  001AF8  6E1A               	movwf	stop@m_L+1,c
   348  001AFA  0E2D               	movlw	low main@motorR
   349  001AFC  6E1B               	movwf	stop@m_R,c
   350  001AFE  0E00               	movlw	high main@motorR
   351  001B00  6E1C               	movwf	stop@m_R+1,c
   352  001B02  ECCE  F00C         	call	_stop	;wreg free
   353                           
   354                           ;main.c: 149: fullSpeed(&motorL, &motorR);
   355  001B06  0E24               	movlw	low main@motorL
   356  001B08  6E19               	movwf	fullSpeed@m_L,c
   357  001B0A  0E00               	movlw	high main@motorL
   358  001B0C  6E1A               	movwf	fullSpeed@m_L+1,c
   359  001B0E  0E2D               	movlw	low main@motorR
   360  001B10  6E1B               	movwf	fullSpeed@m_R,c
   361  001B12  0E00               	movlw	high main@motorR
   362  001B14  6E1C               	movwf	fullSpeed@m_R+1,c
   363  001B16  EC49  F00C         	call	_fullSpeed	;wreg free
   364                           
   365                           ;main.c: 150: delay_s(5);
   366  001B1A  0E05               	movlw	5
   367  001B1C  ECA0  F00C         	call	_delay_s
   368                           
   369                           ;main.c: 151: stop(&motorL, &motorR);
   370  001B20  0E24               	movlw	low main@motorL
   371  001B22  6E19               	movwf	stop@m_L,c
   372  001B24  0E00               	movlw	high main@motorL
   373  001B26  6E1A               	movwf	stop@m_L+1,c
   374  001B28  0E2D               	movlw	low main@motorR
   375  001B2A  6E1B               	movwf	stop@m_R,c
   376  001B2C  0E00               	movlw	high main@motorR
   377  001B2E  6E1C               	movwf	stop@m_R+1,c
   378  001B30  ECCE  F00C         	call	_stop	;wreg free
   379                           
   380                           ;main.c: 152: turnLeft(&motorL, &motorR);
   381  001B34  0E24               	movlw	low main@motorL
   382  001B36  6E19               	movwf	turnLeft@m_L,c
   383  001B38  0E00               	movlw	high main@motorL
   384  001B3A  6E1A               	movwf	turnLeft@m_L+1,c
   385  001B3C  0E2D               	movlw	low main@motorR
   386  001B3E  6E1B               	movwf	turnLeft@m_R,c
   387  001B40  0E00               	movlw	high main@motorR
   388  001B42  6E1C               	movwf	turnLeft@m_R+1,c
   389  001B44  EC66  F00C         	call	_turnLeft	;wreg free
   390                           
   391                           ;main.c: 153: delay_s(5);
   392  001B48  0E05               	movlw	5
   393  001B4A  ECA0  F00C         	call	_delay_s
   394                           
   395                           ;main.c: 154: stop(&motorL, &motorR);
   396  001B4E  0E24               	movlw	low main@motorL
   397  001B50  6E19               	movwf	stop@m_L,c
   398  001B52  0E00               	movlw	high main@motorL
   399  001B54  6E1A               	movwf	stop@m_L+1,c
   400  001B56  0E2D               	movlw	low main@motorR
   401  001B58  6E1B               	movwf	stop@m_R,c
   402  001B5A  0E00               	movlw	high main@motorR
   403  001B5C  6E1C               	movwf	stop@m_R+1,c
   404  001B5E  ECCE  F00C         	call	_stop	;wreg free
   405                           
   406                           ;main.c: 155: turnRight(&motorL, &motorR);
   407  001B62  0E24               	movlw	low main@motorL
   408  001B64  6E19               	movwf	turnRight@m_L,c
   409  001B66  0E00               	movlw	high main@motorL
   410  001B68  6E1A               	movwf	turnRight@m_L+1,c
   411  001B6A  0E2D               	movlw	low main@motorR
   412  001B6C  6E1B               	movwf	turnRight@m_R,c
   413  001B6E  0E00               	movlw	high main@motorR
   414  001B70  6E1C               	movwf	turnRight@m_R+1,c
   415  001B72  EC83  F00C         	call	_turnRight	;wreg free
   416                           
   417                           ;main.c: 156: delay_s(5);
   418  001B76  0E05               	movlw	5
   419  001B78  ECA0  F00C         	call	_delay_s
   420  001B7C  D7BA               	goto	l1029
   421  001B7E                     __end_of_main:
   422                           	opt stack 0
   423                           
   424 ;; *************** function _turnRight *****************
   425 ;; Defined at:
   426 ;;		line 91 in file "main.c"
   427 ;; Parameters:    Size  Location     Type
   428 ;;  m_L             2   24[COMRAM] PTR struct DC_motor
   429 ;;		 -> main@motorR(9), main@motorL(9), 
   430 ;;  m_R             2   26[COMRAM] PTR struct DC_motor
   431 ;;		 -> main@motorR(9), main@motorL(9), 
   432 ;; Auto vars:     Size  Location     Type
   433 ;;		None
   434 ;; Return value:  Size  Location     Type
   435 ;;		None               void
   436 ;; Registers used:
   437 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   438 ;; Tracked objects:
   439 ;;		On entry : 0/0
   440 ;;		On exit  : 0/0
   441 ;;		Unchanged: 0/0
   442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   443 ;;      Params:         4       0       0       0
   444 ;;      Locals:         0       0       0       0
   445 ;;      Temps:          0       0       0       0
   446 ;;      Totals:         4       0       0       0
   447 ;;Total ram usage:        4 bytes
   448 ;; Hardware stack levels used:    1
   449 ;; Hardware stack levels required when called:    3
   450 ;; This function calls:
   451 ;;		_setSingleMotorFullSpeed
   452 ;; This function is called by:
   453 ;;		_main
   454 ;; This function uses a non-reentrant model
   455 ;;
   456                           
   457                           	psect	text1
   458  001906                     __ptext1:
   459                           	opt stack 0
   460  001906                     _turnRight:
   461                           	opt stack 27
   462                           
   463                           ;main.c: 93: setSingleMotorFullSpeed(&m_L);
   464                           
   465                           ;incstack = 0
   466  001906  0E19               	movlw	low turnRight@m_L
   467  001908  6E16               	movwf	setSingleMotorFullSpeed@m,c
   468  00190A  0E00               	movlw	high turnRight@m_L
   469  00190C  6E17               	movwf	setSingleMotorFullSpeed@m+1,c
   470  00190E  EC13  F00C         	call	_setSingleMotorFullSpeed	;wreg free
   471                           
   472                           ;main.c: 94: m_L->direction=1;
   473  001912  EE20 F001          	lfsr	2,1
   474  001916  5019               	movf	turnRight@m_L,w,c
   475  001918  26D9               	addwf	fsr2l,f,c
   476  00191A  501A               	movf	turnRight@m_L+1,w,c
   477  00191C  22DA               	addwfc	fsr2h,f,c
   478  00191E  0E01               	movlw	1
   479  001920  6EDF               	movwf	indf2,c
   480                           
   481                           ;main.c: 95: setSingleMotorFullSpeed(&m_R);
   482  001922  0E1B               	movlw	low turnRight@m_R
   483  001924  6E16               	movwf	setSingleMotorFullSpeed@m,c
   484  001926  0E00               	movlw	high turnRight@m_R
   485  001928  6E17               	movwf	setSingleMotorFullSpeed@m+1,c
   486  00192A  EC13  F00C         	call	_setSingleMotorFullSpeed	;wreg free
   487                           
   488                           ;main.c: 96: m_R->direction=0;
   489  00192E  EE20 F001          	lfsr	2,1
   490  001932  501B               	movf	turnRight@m_R,w,c
   491  001934  26D9               	addwf	fsr2l,f,c
   492  001936  501C               	movf	turnRight@m_R+1,w,c
   493  001938  22DA               	addwfc	fsr2h,f,c
   494  00193A  0E00               	movlw	0
   495  00193C  6EDF               	movwf	indf2,c
   496  00193E  0012               	return		;funcret
   497  001940                     __end_of_turnRight:
   498                           	opt stack 0
   499                           indf2	equ	0xFDF
   500                           fsr2h	equ	0xFDA
   501                           fsr2l	equ	0xFD9
   502                           
   503 ;; *************** function _turnLeft *****************
   504 ;; Defined at:
   505 ;;		line 83 in file "main.c"
   506 ;; Parameters:    Size  Location     Type
   507 ;;  m_L             2   24[COMRAM] PTR struct DC_motor
   508 ;;		 -> main@motorR(9), main@motorL(9), 
   509 ;;  m_R             2   26[COMRAM] PTR struct DC_motor
   510 ;;		 -> main@motorR(9), main@motorL(9), 
   511 ;; Auto vars:     Size  Location     Type
   512 ;;		None
   513 ;; Return value:  Size  Location     Type
   514 ;;		None               void
   515 ;; Registers used:
   516 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   517 ;; Tracked objects:
   518 ;;		On entry : 0/0
   519 ;;		On exit  : 0/0
   520 ;;		Unchanged: 0/0
   521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   522 ;;      Params:         4       0       0       0
   523 ;;      Locals:         0       0       0       0
   524 ;;      Temps:          0       0       0       0
   525 ;;      Totals:         4       0       0       0
   526 ;;Total ram usage:        4 bytes
   527 ;; Hardware stack levels used:    1
   528 ;; Hardware stack levels required when called:    3
   529 ;; This function calls:
   530 ;;		_setSingleMotorFullSpeed
   531 ;; This function is called by:
   532 ;;		_main
   533 ;; This function uses a non-reentrant model
   534 ;;
   535                           
   536                           	psect	text2
   537  0018CC                     __ptext2:
   538                           	opt stack 0
   539  0018CC                     _turnLeft:
   540                           	opt stack 27
   541                           
   542                           ;main.c: 85: setSingleMotorFullSpeed(&m_L);
   543                           
   544                           ;incstack = 0
   545  0018CC  0E19               	movlw	low turnLeft@m_L
   546  0018CE  6E16               	movwf	setSingleMotorFullSpeed@m,c
   547  0018D0  0E00               	movlw	high turnLeft@m_L
   548  0018D2  6E17               	movwf	setSingleMotorFullSpeed@m+1,c
   549  0018D4  EC13  F00C         	call	_setSingleMotorFullSpeed	;wreg free
   550                           
   551                           ;main.c: 86: m_L->direction=0;
   552  0018D8  EE20 F001          	lfsr	2,1
   553  0018DC  5019               	movf	turnLeft@m_L,w,c
   554  0018DE  26D9               	addwf	fsr2l,f,c
   555  0018E0  501A               	movf	turnLeft@m_L+1,w,c
   556  0018E2  22DA               	addwfc	fsr2h,f,c
   557  0018E4  0E00               	movlw	0
   558  0018E6  6EDF               	movwf	indf2,c
   559                           
   560                           ;main.c: 87: setSingleMotorFullSpeed(&m_R);
   561  0018E8  0E1B               	movlw	low turnLeft@m_R
   562  0018EA  6E16               	movwf	setSingleMotorFullSpeed@m,c
   563  0018EC  0E00               	movlw	high turnLeft@m_R
   564  0018EE  6E17               	movwf	setSingleMotorFullSpeed@m+1,c
   565  0018F0  EC13  F00C         	call	_setSingleMotorFullSpeed	;wreg free
   566                           
   567                           ;main.c: 88: m_R->direction=1;
   568  0018F4  EE20 F001          	lfsr	2,1
   569  0018F8  501B               	movf	turnLeft@m_R,w,c
   570  0018FA  26D9               	addwf	fsr2l,f,c
   571  0018FC  501C               	movf	turnLeft@m_R+1,w,c
   572  0018FE  22DA               	addwfc	fsr2h,f,c
   573  001900  0E01               	movlw	1
   574  001902  6EDF               	movwf	indf2,c
   575  001904  0012               	return		;funcret
   576  001906                     __end_of_turnLeft:
   577                           	opt stack 0
   578                           indf2	equ	0xFDF
   579                           fsr2h	equ	0xFDA
   580                           fsr2l	equ	0xFD9
   581                           
   582 ;; *************** function _stop *****************
   583 ;; Defined at:
   584 ;;		line 72 in file "main.c"
   585 ;; Parameters:    Size  Location     Type
   586 ;;  m_L             2   24[COMRAM] PTR struct DC_motor
   587 ;;		 -> main@motorR(9), main@motorL(9), 
   588 ;;  m_R             2   26[COMRAM] PTR struct DC_motor
   589 ;;		 -> main@motorR(9), main@motorL(9), 
   590 ;; Auto vars:     Size  Location     Type
   591 ;;  i               2   33[COMRAM] int 
   592 ;;  temp2           2   31[COMRAM] int 
   593 ;;  temp            2   29[COMRAM] int 
   594 ;; Return value:  Size  Location     Type
   595 ;;		None               void
   596 ;; Registers used:
   597 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   598 ;; Tracked objects:
   599 ;;		On entry : 0/0
   600 ;;		On exit  : 0/0
   601 ;;		Unchanged: 0/0
   602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   603 ;;      Params:         4       0       0       0
   604 ;;      Locals:         6       0       0       0
   605 ;;      Temps:          1       0       0       0
   606 ;;      Totals:        11       0       0       0
   607 ;;Total ram usage:       11 bytes
   608 ;; Hardware stack levels used:    1
   609 ;; Hardware stack levels required when called:    3
   610 ;; This function calls:
   611 ;;		_stopSingleMotor
   612 ;; This function is called by:
   613 ;;		_main
   614 ;; This function uses a non-reentrant model
   615 ;;
   616                           
   617                           	psect	text3
   618  00199C                     __ptext3:
   619                           	opt stack 0
   620  00199C                     _stop:
   621                           	opt stack 27
   622                           
   623                           ;main.c: 74: m_L->direction=1;
   624                           
   625                           ;incstack = 0
   626  00199C  EE20 F001          	lfsr	2,1
   627  0019A0  5019               	movf	stop@m_L,w,c
   628  0019A2  26D9               	addwf	fsr2l,f,c
   629  0019A4  501A               	movf	stop@m_L+1,w,c
   630  0019A6  22DA               	addwfc	fsr2h,f,c
   631  0019A8  0E01               	movlw	1
   632  0019AA  6EDF               	movwf	indf2,c
   633                           
   634                           ;main.c: 75: m_R->direction=1;
   635  0019AC  EE20 F001          	lfsr	2,1
   636  0019B0  501B               	movf	stop@m_R,w,c
   637  0019B2  26D9               	addwf	fsr2l,f,c
   638  0019B4  501C               	movf	stop@m_R+1,w,c
   639  0019B6  22DA               	addwfc	fsr2h,f,c
   640  0019B8  0E01               	movlw	1
   641  0019BA  6EDF               	movwf	indf2,c
   642                           
   643                           ;main.c: 76: stopSingleMotor(&m_L);
   644  0019BC  0E19               	movlw	low stop@m_L
   645  0019BE  6E16               	movwf	stopSingleMotor@m,c
   646  0019C0  0E00               	movlw	high stop@m_L
   647  0019C2  6E17               	movwf	stopSingleMotor@m+1,c
   648  0019C4  EC2E  F00C         	call	_stopSingleMotor	;wreg free
   649                           
   650                           ;main.c: 77: stopSingleMotor(&m_R);
   651  0019C8  0E1B               	movlw	low stop@m_R
   652  0019CA  6E16               	movwf	stopSingleMotor@m,c
   653  0019CC  0E00               	movlw	high stop@m_R
   654  0019CE  6E17               	movwf	stopSingleMotor@m+1,c
   655  0019D0  EC2E  F00C         	call	_stopSingleMotor	;wreg free
   656                           
   657                           ;main.c: 78: int temp = m_L->power;
   658  0019D4  C019  FFD9         	movff	stop@m_L,fsr2l
   659  0019D8  C01A  FFDA         	movff	stop@m_L+1,fsr2h
   660  0019DC  50DF               	movf	indf2,w,c
   661  0019DE  6E1D               	movwf	??_stop& (0+255),c
   662  0019E0  501D               	movf	??_stop,w,c
   663  0019E2  6E1E               	movwf	stop@temp,c
   664  0019E4  6A1F               	clrf	stop@temp+1,c
   665                           
   666                           ;main.c: 79: int temp2 = m_R->power;
   667  0019E6  C01B  FFD9         	movff	stop@m_R,fsr2l
   668  0019EA  C01C  FFDA         	movff	stop@m_R+1,fsr2h
   669  0019EE  50DF               	movf	indf2,w,c
   670  0019F0  6E1D               	movwf	??_stop& (0+255),c
   671  0019F2  501D               	movf	??_stop,w,c
   672  0019F4  6E20               	movwf	stop@temp2,c
   673  0019F6  6A21               	clrf	stop@temp2+1,c
   674                           
   675                           ;main.c: 80: int i = 0;
   676  0019F8  0E00               	movlw	0
   677  0019FA  6E23               	movwf	stop@i+1,c
   678  0019FC  0E00               	movlw	0
   679  0019FE  6E22               	movwf	stop@i,c
   680  001A00  0012               	return		;funcret
   681  001A02                     __end_of_stop:
   682                           	opt stack 0
   683                           indf2	equ	0xFDF
   684                           fsr2h	equ	0xFDA
   685                           fsr2l	equ	0xFD9
   686                           
   687 ;; *************** function _stopSingleMotor *****************
   688 ;; Defined at:
   689 ;;		line 56 in file "main.c"
   690 ;; Parameters:    Size  Location     Type
   691 ;;  m               2   21[COMRAM] PTR struct DC_motor
   692 ;;		 -> stop@m_R(2), stop@m_L(2), 
   693 ;; Auto vars:     Size  Location     Type
   694 ;;		None
   695 ;; Return value:  Size  Location     Type
   696 ;;		None               void
   697 ;; Registers used:
   698 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   699 ;; Tracked objects:
   700 ;;		On entry : 0/0
   701 ;;		On exit  : 0/0
   702 ;;		Unchanged: 0/0
   703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   704 ;;      Params:         2       0       0       0
   705 ;;      Locals:         0       0       0       0
   706 ;;      Temps:          1       0       0       0
   707 ;;      Totals:         3       0       0       0
   708 ;;Total ram usage:        3 bytes
   709 ;; Hardware stack levels used:    1
   710 ;; Hardware stack levels required when called:    2
   711 ;; This function calls:
   712 ;;		_setMotorPWM
   713 ;; This function is called by:
   714 ;;		_stop
   715 ;; This function uses a non-reentrant model
   716 ;;
   717                           
   718                           	psect	text4
   719  00185C                     __ptext4:
   720                           	opt stack 0
   721  00185C                     _stopSingleMotor:
   722                           	opt stack 27
   723                           
   724                           ;incstack = 0
   725  00185C  D012               	goto	l971
   726  00185E                     l965:
   727                           
   728                           ;main.c: 59: setMotorPWM(m);
   729  00185E  C016  F00F         	movff	stopSingleMotor@m,setMotorPWM@m
   730  001862  C017  F010         	movff	stopSingleMotor@m+1,setMotorPWM@m+1
   731  001866  ECBF  F00D         	call	_setMotorPWM	;wreg free
   732                           
   733                           ;main.c: 60: _delay((unsigned long)((5)*(8000000/4000.0)));
   734  00186A  0E0D               	movlw	13
   735  00186C  6E18               	movwf	??_stopSingleMotor& (0+255),c
   736  00186E  0EFC               	movlw	252
   737  001870                     u307:
   738  001870  2EE8               	decfsz	wreg,f,c
   739  001872  D7FE               	goto	u307
   740  001874  2E18               	decfsz	??_stopSingleMotor& (0+255),f,c
   741  001876  D7FC               	goto	u307
   742  001878  C016  FFD9         	movff	stopSingleMotor@m,fsr2l
   743  00187C  C017  FFDA         	movff	stopSingleMotor@m+1,fsr2h
   744  001880  06DF               	decf	indf2,f,c
   745  001882                     l971:
   746  001882  C016  FFD9         	movff	stopSingleMotor@m,fsr2l
   747  001886  C017  FFDA         	movff	stopSingleMotor@m+1,fsr2h
   748  00188A  50DF               	movf	indf2,w,c
   749  00188C  B4D8               	btfsc	status,2,c
   750  00188E  0012               	return	
   751  001890  D7E6               	goto	l965
   752  001892                     __end_of_stopSingleMotor:
   753                           	opt stack 0
   754                           wreg	equ	0xFE8
   755                           indf2	equ	0xFDF
   756                           fsr2h	equ	0xFDA
   757                           fsr2l	equ	0xFD9
   758                           status	equ	0xFD8
   759                           
   760 ;; *************** function _initPWM *****************
   761 ;; Defined at:
   762 ;;		line 15 in file "main.c"
   763 ;; Parameters:    Size  Location     Type
   764 ;;		None
   765 ;; Auto vars:     Size  Location     Type
   766 ;;		None
   767 ;; Return value:  Size  Location     Type
   768 ;;		None               void
   769 ;; Registers used:
   770 ;;		wreg, status,2
   771 ;; Tracked objects:
   772 ;;		On entry : 0/0
   773 ;;		On exit  : 0/0
   774 ;;		Unchanged: 0/0
   775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   776 ;;      Params:         0       0       0       0
   777 ;;      Locals:         0       0       0       0
   778 ;;      Temps:          0       0       0       0
   779 ;;      Totals:         0       0       0       0
   780 ;;Total ram usage:        0 bytes
   781 ;; Hardware stack levels used:    1
   782 ;; This function calls:
   783 ;;		Nothing
   784 ;; This function is called by:
   785 ;;		_main
   786 ;; This function uses a non-reentrant model
   787 ;;
   788                           
   789                           	psect	text5
   790  0017E6                     __ptext5:
   791                           	opt stack 0
   792  0017E6                     _initPWM:
   793                           	opt stack 30
   794                           
   795                           ;main.c: 16: PTCON0 = 0b00000000;
   796                           
   797                           ;incstack = 0
   798  0017E6  0E00               	movlw	0
   799  0017E8  6E7F               	movwf	3967,c	;volatile
   800                           
   801                           ;main.c: 17: PTCON1 = 0b10000000;
   802  0017EA  0E80               	movlw	128
   803  0017EC  6E7E               	movwf	3966,c	;volatile
   804                           
   805                           ;main.c: 18: PWMCON0 = 0b01101111;
   806  0017EE  0E6F               	movlw	111
   807  0017F0  6E6F               	movwf	3951,c	;volatile
   808                           
   809                           ;main.c: 19: PWMCON1 = 0x00;
   810  0017F2  0E00               	movlw	0
   811  0017F4  6E6E               	movwf	3950,c	;volatile
   812                           
   813                           ;main.c: 21: PTPERL = 0b11000111;
   814  0017F6  0EC7               	movlw	199
   815  0017F8  6E7B               	movwf	3963,c	;volatile
   816                           
   817                           ;main.c: 22: PTPERH = 0b00000000;
   818  0017FA  0E00               	movlw	0
   819  0017FC  6E7A               	movwf	3962,c	;volatile
   820  0017FE  0012               	return		;funcret
   821  001800                     __end_of_initPWM:
   822                           	opt stack 0
   823                           wreg	equ	0xFE8
   824                           indf2	equ	0xFDF
   825                           fsr2h	equ	0xFDA
   826                           fsr2l	equ	0xFD9
   827                           status	equ	0xFD8
   828                           
   829 ;; *************** function _fullSpeed *****************
   830 ;; Defined at:
   831 ;;		line 64 in file "main.c"
   832 ;; Parameters:    Size  Location     Type
   833 ;;  m_L             2   24[COMRAM] PTR struct DC_motor
   834 ;;		 -> main@motorR(9), main@motorL(9), 
   835 ;;  m_R             2   26[COMRAM] PTR struct DC_motor
   836 ;;		 -> main@motorR(9), main@motorL(9), 
   837 ;; Auto vars:     Size  Location     Type
   838 ;;		None
   839 ;; Return value:  Size  Location     Type
   840 ;;		None               void
   841 ;; Registers used:
   842 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   843 ;; Tracked objects:
   844 ;;		On entry : 0/0
   845 ;;		On exit  : 0/0
   846 ;;		Unchanged: 0/0
   847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   848 ;;      Params:         4       0       0       0
   849 ;;      Locals:         0       0       0       0
   850 ;;      Temps:          0       0       0       0
   851 ;;      Totals:         4       0       0       0
   852 ;;Total ram usage:        4 bytes
   853 ;; Hardware stack levels used:    1
   854 ;; Hardware stack levels required when called:    3
   855 ;; This function calls:
   856 ;;		_setSingleMotorFullSpeed
   857 ;; This function is called by:
   858 ;;		_main
   859 ;; This function uses a non-reentrant model
   860 ;;
   861                           
   862                           	psect	text6
   863  001892                     __ptext6:
   864                           	opt stack 0
   865  001892                     _fullSpeed:
   866                           	opt stack 27
   867                           
   868                           ;main.c: 66: m_L->direction=1;
   869                           
   870                           ;incstack = 0
   871  001892  EE20 F001          	lfsr	2,1
   872  001896  5019               	movf	fullSpeed@m_L,w,c
   873  001898  26D9               	addwf	fsr2l,f,c
   874  00189A  501A               	movf	fullSpeed@m_L+1,w,c
   875  00189C  22DA               	addwfc	fsr2h,f,c
   876  00189E  0E01               	movlw	1
   877  0018A0  6EDF               	movwf	indf2,c
   878                           
   879                           ;main.c: 67: m_R->direction=1;
   880  0018A2  EE20 F001          	lfsr	2,1
   881  0018A6  501B               	movf	fullSpeed@m_R,w,c
   882  0018A8  26D9               	addwf	fsr2l,f,c
   883  0018AA  501C               	movf	fullSpeed@m_R+1,w,c
   884  0018AC  22DA               	addwfc	fsr2h,f,c
   885  0018AE  0E01               	movlw	1
   886  0018B0  6EDF               	movwf	indf2,c
   887                           
   888                           ;main.c: 68: setSingleMotorFullSpeed(&m_L);
   889  0018B2  0E19               	movlw	low fullSpeed@m_L
   890  0018B4  6E16               	movwf	setSingleMotorFullSpeed@m,c
   891  0018B6  0E00               	movlw	high fullSpeed@m_L
   892  0018B8  6E17               	movwf	setSingleMotorFullSpeed@m+1,c
   893  0018BA  EC13  F00C         	call	_setSingleMotorFullSpeed	;wreg free
   894                           
   895                           ;main.c: 69: setSingleMotorFullSpeed(&m_R);
   896  0018BE  0E1B               	movlw	low fullSpeed@m_R
   897  0018C0  6E16               	movwf	setSingleMotorFullSpeed@m,c
   898  0018C2  0E00               	movlw	high fullSpeed@m_R
   899  0018C4  6E17               	movwf	setSingleMotorFullSpeed@m+1,c
   900  0018C6  EC13  F00C         	call	_setSingleMotorFullSpeed	;wreg free
   901  0018CA  0012               	return		;funcret
   902  0018CC                     __end_of_fullSpeed:
   903                           	opt stack 0
   904                           wreg	equ	0xFE8
   905                           indf2	equ	0xFDF
   906                           fsr2h	equ	0xFDA
   907                           fsr2l	equ	0xFD9
   908                           status	equ	0xFD8
   909                           
   910 ;; *************** function _setSingleMotorFullSpeed *****************
   911 ;; Defined at:
   912 ;;		line 48 in file "main.c"
   913 ;; Parameters:    Size  Location     Type
   914 ;;  m               2   21[COMRAM] PTR struct DC_motor
   915 ;;		 -> turnRight@m_R(2), turnRight@m_L(2), turnLeft@m_R(2), turnLeft@m_L(2), 
   916 ;;		 -> fullSpeed@m_R(2), fullSpeed@m_L(2), 
   917 ;; Auto vars:     Size  Location     Type
   918 ;;		None
   919 ;; Return value:  Size  Location     Type
   920 ;;		None               void
   921 ;; Registers used:
   922 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   923 ;; Tracked objects:
   924 ;;		On entry : 0/0
   925 ;;		On exit  : 0/0
   926 ;;		Unchanged: 0/0
   927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   928 ;;      Params:         2       0       0       0
   929 ;;      Locals:         0       0       0       0
   930 ;;      Temps:          1       0       0       0
   931 ;;      Totals:         3       0       0       0
   932 ;;Total ram usage:        3 bytes
   933 ;; Hardware stack levels used:    1
   934 ;; Hardware stack levels required when called:    2
   935 ;; This function calls:
   936 ;;		_setMotorPWM
   937 ;; This function is called by:
   938 ;;		_fullSpeed
   939 ;;		_turnLeft
   940 ;;		_turnRight
   941 ;; This function uses a non-reentrant model
   942 ;;
   943                           
   944                           	psect	text7
   945  001826                     __ptext7:
   946                           	opt stack 0
   947  001826                     _setSingleMotorFullSpeed:
   948                           	opt stack 27
   949                           
   950                           ;incstack = 0
   951  001826  D012               	goto	l961
   952  001828                     l955:
   953                           
   954                           ;main.c: 51: setMotorPWM(m);
   955  001828  C016  F00F         	movff	setSingleMotorFullSpeed@m,setMotorPWM@m
   956  00182C  C017  F010         	movff	setSingleMotorFullSpeed@m+1,setMotorPWM@m+1
   957  001830  ECBF  F00D         	call	_setMotorPWM	;wreg free
   958                           
   959                           ;main.c: 52: _delay((unsigned long)((5)*(8000000/4000.0)));
   960  001834  0E0D               	movlw	13
   961  001836  6E18               	movwf	??_setSingleMotorFullSpeed& (0+255),c
   962  001838  0EFC               	movlw	252
   963  00183A                     u317:
   964  00183A  2EE8               	decfsz	wreg,f,c
   965  00183C  D7FE               	goto	u317
   966  00183E  2E18               	decfsz	??_setSingleMotorFullSpeed& (0+255),f,c
   967  001840  D7FC               	goto	u317
   968  001842  C016  FFD9         	movff	setSingleMotorFullSpeed@m,fsr2l
   969  001846  C017  FFDA         	movff	setSingleMotorFullSpeed@m+1,fsr2h
   970  00184A  2ADF               	incf	indf2,f,c
   971  00184C                     l961:
   972  00184C  C016  FFD9         	movff	setSingleMotorFullSpeed@m,fsr2l
   973  001850  C017  FFDA         	movff	setSingleMotorFullSpeed@m+1,fsr2h
   974  001854  0E63               	movlw	99
   975  001856  64DF               	cpfsgt	indf2,c
   976  001858  D7E7               	goto	l955
   977  00185A  0012               	return	
   978  00185C                     __end_of_setSingleMotorFullSpeed:
   979                           	opt stack 0
   980                           wreg	equ	0xFE8
   981                           indf2	equ	0xFDF
   982                           fsr2h	equ	0xFDA
   983                           fsr2l	equ	0xFD9
   984                           status	equ	0xFD8
   985                           
   986 ;; *************** function _setMotorPWM *****************
   987 ;; Defined at:
   988 ;;		line 26 in file "main.c"
   989 ;; Parameters:    Size  Location     Type
   990 ;;  m               2   14[COMRAM] PTR struct DC_motor
   991 ;;		 -> turnRight@m_R(2), turnRight@m_L(2), turnLeft@m_R(2), turnLeft@m_L(2), 
   992 ;;		 -> stop@m_R(2), stop@m_L(2), fullSpeed@m_R(2), fullSpeed@m_L(2), 
   993 ;; Auto vars:     Size  Location     Type
   994 ;;  PWMduty         2   19[COMRAM] int 
   995 ;; Return value:  Size  Location     Type
   996 ;;		None               void
   997 ;; Registers used:
   998 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   999 ;; Tracked objects:
  1000 ;;		On entry : 0/0
  1001 ;;		On exit  : 0/0
  1002 ;;		Unchanged: 0/0
  1003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1004 ;;      Params:         2       0       0       0
  1005 ;;      Locals:         2       0       0       0
  1006 ;;      Temps:          3       0       0       0
  1007 ;;      Totals:         7       0       0       0
  1008 ;;Total ram usage:        7 bytes
  1009 ;; Hardware stack levels used:    1
  1010 ;; Hardware stack levels required when called:    1
  1011 ;; This function calls:
  1012 ;;		___awdiv
  1013 ;;		___wmul
  1014 ;; This function is called by:
  1015 ;;		_setSingleMotorFullSpeed
  1016 ;;		_stopSingleMotor
  1017 ;; This function uses a non-reentrant model
  1018 ;;
  1019                           
  1020                           	psect	text8
  1021  001B7E                     __ptext8:
  1022                           	opt stack 0
  1023  001B7E                     _setMotorPWM:
  1024                           	opt stack 27
  1025                           
  1026                           ;main.c: 28: int PWMduty;
  1027                           ;main.c: 29: if (m->direction){
  1028                           
  1029                           ;incstack = 0
  1030  001B7E  EE20 F001          	lfsr	2,1
  1031  001B82  500F               	movf	setMotorPWM@m,w,c
  1032  001B84  26D9               	addwf	fsr2l,f,c
  1033  001B86  5010               	movf	setMotorPWM@m+1,w,c
  1034  001B88  22DA               	addwfc	fsr2h,f,c
  1035  001B8A  50DF               	movf	indf2,w,c
  1036  001B8C  B4D8               	btfsc	status,2,c
  1037  001B8E  D034               	goto	l939
  1038                           
  1039                           ;main.c: 31: PWMduty=m->PWMperiod - ((int)(m->power)*(m->PWMperiod))/100;
  1040  001B90  EE20 F007          	lfsr	2,7
  1041  001B94  500F               	movf	setMotorPWM@m,w,c
  1042  001B96  26D9               	addwf	fsr2l,f,c
  1043  001B98  5010               	movf	setMotorPWM@m+1,w,c
  1044  001B9A  22DA               	addwfc	fsr2h,f,c
  1045  001B9C  CFDE F011          	movff	postinc2,??_setMotorPWM
  1046  001BA0  CFDD F012          	movff	postdec2,??_setMotorPWM+1
  1047  001BA4  C00F  FFD9         	movff	setMotorPWM@m,fsr2l
  1048  001BA8  C010  FFDA         	movff	setMotorPWM@m+1,fsr2h
  1049  001BAC  50DF               	movf	indf2,w,c
  1050  001BAE  6E13               	movwf	(??_setMotorPWM+2)& (0+255),c
  1051  001BB0  5013               	movf	??_setMotorPWM+2,w,c
  1052  001BB2  6E01               	movwf	___wmul@multiplier,c
  1053  001BB4  6A02               	clrf	___wmul@multiplier+1,c
  1054  001BB6  EE20 F007          	lfsr	2,7
  1055  001BBA  500F               	movf	setMotorPWM@m,w,c
  1056  001BBC  26D9               	addwf	fsr2l,f,c
  1057  001BBE  5010               	movf	setMotorPWM@m+1,w,c
  1058  001BC0  22DA               	addwfc	fsr2h,f,c
  1059  001BC2  CFDE F003          	movff	postinc2,___wmul@multiplicand
  1060  001BC6  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  1061  001BCA  EC00  F00C         	call	___wmul	;wreg free
  1062  001BCE  C001  F007         	movff	?___wmul,___awdiv@dividend
  1063  001BD2  C002  F008         	movff	?___wmul+1,___awdiv@dividend+1
  1064  001BD6  0E00               	movlw	0
  1065  001BD8  6E0A               	movwf	___awdiv@divisor+1,c
  1066  001BDA  0E64               	movlw	100
  1067  001BDC  6E09               	movwf	___awdiv@divisor,c
  1068  001BDE  EC01  F00D         	call	___awdiv	;wreg free
  1069  001BE2  1E07               	comf	?___awdiv,f,c
  1070  001BE4  1E08               	comf	?___awdiv+1,f,c
  1071  001BE6  4A07               	infsnz	?___awdiv,f,c
  1072  001BE8  2A08               	incf	?___awdiv+1,f,c
  1073  001BEA  5011               	movf	??_setMotorPWM,w,c
  1074  001BEC  2407               	addwf	?___awdiv,w,c
  1075  001BEE  6E14               	movwf	setMotorPWM@PWMduty,c
  1076  001BF0  5012               	movf	??_setMotorPWM+1,w,c
  1077  001BF2  2008               	addwfc	?___awdiv+1,w,c
  1078  001BF4  6E15               	movwf	setMotorPWM@PWMduty+1,c
  1079                           
  1080                           ;main.c: 32: }
  1081  001BF6  D023               	goto	l941
  1082  001BF8                     l939:
  1083                           
  1084                           ;main.c: 33: else {
  1085                           ;main.c: 35: PWMduty=((int)(m->power)*(m->PWMperiod))/100;
  1086  001BF8  C00F  FFD9         	movff	setMotorPWM@m,fsr2l
  1087  001BFC  C010  FFDA         	movff	setMotorPWM@m+1,fsr2h
  1088  001C00  50DF               	movf	indf2,w,c
  1089  001C02  6E11               	movwf	??_setMotorPWM& (0+255),c
  1090  001C04  5011               	movf	??_setMotorPWM,w,c
  1091  001C06  6E01               	movwf	___wmul@multiplier,c
  1092  001C08  6A02               	clrf	___wmul@multiplier+1,c
  1093  001C0A  EE20 F007          	lfsr	2,7
  1094  001C0E  500F               	movf	setMotorPWM@m,w,c
  1095  001C10  26D9               	addwf	fsr2l,f,c
  1096  001C12  5010               	movf	setMotorPWM@m+1,w,c
  1097  001C14  22DA               	addwfc	fsr2h,f,c
  1098  001C16  CFDE F003          	movff	postinc2,___wmul@multiplicand
  1099  001C1A  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  1100  001C1E  EC00  F00C         	call	___wmul	;wreg free
  1101  001C22  C001  F007         	movff	?___wmul,___awdiv@dividend
  1102  001C26  C002  F008         	movff	?___wmul+1,___awdiv@dividend+1
  1103  001C2A  0E00               	movlw	0
  1104  001C2C  6E0A               	movwf	___awdiv@divisor+1,c
  1105  001C2E  0E64               	movlw	100
  1106  001C30  6E09               	movwf	___awdiv@divisor,c
  1107  001C32  EC01  F00D         	call	___awdiv	;wreg free
  1108  001C36  C007  F014         	movff	?___awdiv,setMotorPWM@PWMduty
  1109  001C3A  C008  F015         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  1110  001C3E                     l941:
  1111                           
  1112                           ;main.c: 36: }
  1113                           ;main.c: 37: PWMduty = (PWMduty << 2);
  1114  001C3E  C014  F011         	movff	setMotorPWM@PWMduty,??_setMotorPWM
  1115  001C42  C015  F012         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+1
  1116  001C46  90D8               	bcf	status,0,c
  1117  001C48  3611               	rlcf	??_setMotorPWM,f,c
  1118  001C4A  3612               	rlcf	??_setMotorPWM+1,f,c
  1119  001C4C  90D8               	bcf	status,0,c
  1120  001C4E  3611               	rlcf	??_setMotorPWM,f,c
  1121  001C50  3612               	rlcf	??_setMotorPWM+1,f,c
  1122  001C52  C011  F014         	movff	??_setMotorPWM,setMotorPWM@PWMduty
  1123  001C56  C012  F015         	movff	??_setMotorPWM+1,setMotorPWM@PWMduty+1
  1124                           
  1125                           ;main.c: 38: *(m->dutyLowByte) = PWMduty & 0xFF;
  1126  001C5A  EE20 F002          	lfsr	2,2
  1127  001C5E  500F               	movf	setMotorPWM@m,w,c
  1128  001C60  26D9               	addwf	fsr2l,f,c
  1129  001C62  5010               	movf	setMotorPWM@m+1,w,c
  1130  001C64  22DA               	addwfc	fsr2h,f,c
  1131  001C66  CFDE F011          	movff	postinc2,??_setMotorPWM
  1132  001C6A  CFDD F012          	movff	postdec2,??_setMotorPWM+1
  1133  001C6E  C011  FFD9         	movff	??_setMotorPWM,fsr2l
  1134  001C72  C012  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1135  001C76  C014  FFDF         	movff	setMotorPWM@PWMduty,indf2
  1136                           
  1137                           ;main.c: 39: *(m->dutyHighByte) = (PWMduty >> 8) & 0x3F;
  1138  001C7A  EE20 F004          	lfsr	2,4
  1139  001C7E  500F               	movf	setMotorPWM@m,w,c
  1140  001C80  26D9               	addwf	fsr2l,f,c
  1141  001C82  5010               	movf	setMotorPWM@m+1,w,c
  1142  001C84  22DA               	addwfc	fsr2h,f,c
  1143  001C86  CFDE F011          	movff	postinc2,??_setMotorPWM
  1144  001C8A  CFDD F012          	movff	postdec2,??_setMotorPWM+1
  1145  001C8E  C011  FFD9         	movff	??_setMotorPWM,fsr2l
  1146  001C92  C012  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1147  001C96  5015               	movf	setMotorPWM@PWMduty+1,w,c
  1148  001C98  0B3F               	andlw	63
  1149  001C9A  6EDF               	movwf	indf2,c
  1150                           
  1151                           ;main.c: 41: if (m->direction){
  1152  001C9C  EE20 F001          	lfsr	2,1
  1153  001CA0  500F               	movf	setMotorPWM@m,w,c
  1154  001CA2  26D9               	addwf	fsr2l,f,c
  1155  001CA4  5010               	movf	setMotorPWM@m+1,w,c
  1156  001CA6  22DA               	addwfc	fsr2h,f,c
  1157  001CA8  50DF               	movf	indf2,w,c
  1158  001CAA  B4D8               	btfsc	status,2,c
  1159  001CAC  D014               	goto	l951
  1160                           
  1161                           ;main.c: 42: LATB=LATB | (1<<(m->dir_pin));
  1162  001CAE  EE20 F006          	lfsr	2,6
  1163  001CB2  500F               	movf	setMotorPWM@m,w,c
  1164  001CB4  26D9               	addwf	fsr2l,f,c
  1165  001CB6  5010               	movf	setMotorPWM@m+1,w,c
  1166  001CB8  22DA               	addwfc	fsr2h,f,c
  1167  001CBA  50DF               	movf	indf2,w,c
  1168  001CBC  6E11               	movwf	??_setMotorPWM& (0+255),c
  1169  001CBE  0E01               	movlw	1
  1170  001CC0  6E12               	movwf	(??_setMotorPWM+1)& (0+255),c
  1171  001CC2  2A11               	incf	??_setMotorPWM,f,c
  1172  001CC4  D002               	goto	u254
  1173  001CC6                     u255:
  1174  001CC6  90D8               	bcf	status,0,c
  1175  001CC8  3612               	rlcf	??_setMotorPWM+1,f,c
  1176  001CCA                     u254:
  1177  001CCA  2E11               	decfsz	??_setMotorPWM,f,c
  1178  001CCC  D7FC               	goto	u255
  1179  001CCE  5012               	movf	??_setMotorPWM+1,w,c
  1180  001CD0  108A               	iorwf	3978,w,c	;volatile
  1181  001CD2  6E8A               	movwf	3978,c	;volatile
  1182                           
  1183                           ;main.c: 43: } else {
  1184  001CD4  0012               	return	
  1185  001CD6                     l951:
  1186                           
  1187                           ;main.c: 44: LATB=LATB & (~(1<<(m->dir_pin)));
  1188  001CD6  EE20 F006          	lfsr	2,6
  1189  001CDA  500F               	movf	setMotorPWM@m,w,c
  1190  001CDC  26D9               	addwf	fsr2l,f,c
  1191  001CDE  5010               	movf	setMotorPWM@m+1,w,c
  1192  001CE0  22DA               	addwfc	fsr2h,f,c
  1193  001CE2  50DF               	movf	indf2,w,c
  1194  001CE4  6E11               	movwf	??_setMotorPWM& (0+255),c
  1195  001CE6  0E01               	movlw	1
  1196  001CE8  6E12               	movwf	(??_setMotorPWM+1)& (0+255),c
  1197  001CEA  2A11               	incf	??_setMotorPWM,f,c
  1198  001CEC  D002               	goto	u264
  1199  001CEE                     u265:
  1200  001CEE  90D8               	bcf	status,0,c
  1201  001CF0  3612               	rlcf	??_setMotorPWM+1,f,c
  1202  001CF2                     u264:
  1203  001CF2  2E11               	decfsz	??_setMotorPWM,f,c
  1204  001CF4  D7FC               	goto	u265
  1205  001CF6  5012               	movf	??_setMotorPWM+1,w,c
  1206  001CF8  0AFF               	xorlw	255
  1207  001CFA  148A               	andwf	3978,w,c	;volatile
  1208  001CFC  6E8A               	movwf	3978,c	;volatile
  1209  001CFE  0012               	return	
  1210  001D00                     __end_of_setMotorPWM:
  1211                           	opt stack 0
  1212                           wreg	equ	0xFE8
  1213                           indf2	equ	0xFDF
  1214                           postinc2	equ	0xFDE
  1215                           postdec2	equ	0xFDD
  1216                           fsr2h	equ	0xFDA
  1217                           fsr2l	equ	0xFD9
  1218                           status	equ	0xFD8
  1219                           
  1220 ;; *************** function ___wmul *****************
  1221 ;; Defined at:
  1222 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  1223 ;; Parameters:    Size  Location     Type
  1224 ;;  multiplier      2    0[COMRAM] unsigned int 
  1225 ;;  multiplicand    2    2[COMRAM] unsigned int 
  1226 ;; Auto vars:     Size  Location     Type
  1227 ;;  product         2    4[COMRAM] unsigned int 
  1228 ;; Return value:  Size  Location     Type
  1229 ;;                  2    0[COMRAM] unsigned int 
  1230 ;; Registers used:
  1231 ;;		wreg, status,2, status,0, prodl, prodh
  1232 ;; Tracked objects:
  1233 ;;		On entry : 0/0
  1234 ;;		On exit  : 0/0
  1235 ;;		Unchanged: 0/0
  1236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1237 ;;      Params:         4       0       0       0
  1238 ;;      Locals:         2       0       0       0
  1239 ;;      Temps:          0       0       0       0
  1240 ;;      Totals:         6       0       0       0
  1241 ;;Total ram usage:        6 bytes
  1242 ;; Hardware stack levels used:    1
  1243 ;; This function calls:
  1244 ;;		Nothing
  1245 ;; This function is called by:
  1246 ;;		_setMotorPWM
  1247 ;; This function uses a non-reentrant model
  1248 ;;
  1249                           
  1250                           	psect	text9
  1251  001800                     __ptext9:
  1252                           	opt stack 0
  1253  001800                     ___wmul:
  1254                           	opt stack 27
  1255                           
  1256                           ;incstack = 0
  1257  001800  5001               	movf	___wmul@multiplier,w,c
  1258  001802  0203               	mulwf	___wmul@multiplicand,c
  1259  001804  CFF3 F005          	movff	prodl,___wmul@product
  1260  001808  CFF4 F006          	movff	prodh,___wmul@product+1
  1261  00180C  5001               	movf	___wmul@multiplier,w,c
  1262  00180E  0204               	mulwf	___wmul@multiplicand+1,c
  1263  001810  50F3               	movf	prodl,w,c
  1264  001812  2606               	addwf	___wmul@product+1,f,c
  1265  001814  5002               	movf	___wmul@multiplier+1,w,c
  1266  001816  0203               	mulwf	___wmul@multiplicand,c
  1267  001818  50F3               	movf	prodl,w,c
  1268  00181A  2606               	addwf	___wmul@product+1,f,c
  1269  00181C  C005  F001         	movff	___wmul@product,?___wmul
  1270  001820  C006  F002         	movff	___wmul@product+1,?___wmul+1
  1271  001824  0012               	return	
  1272  001826                     __end_of___wmul:
  1273                           	opt stack 0
  1274                           prodh	equ	0xFF4
  1275                           prodl	equ	0xFF3
  1276                           wreg	equ	0xFE8
  1277                           indf2	equ	0xFDF
  1278                           postinc2	equ	0xFDE
  1279                           postdec2	equ	0xFDD
  1280                           fsr2h	equ	0xFDA
  1281                           fsr2l	equ	0xFD9
  1282                           status	equ	0xFD8
  1283                           
  1284 ;; *************** function ___awdiv *****************
  1285 ;; Defined at:
  1286 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  1287 ;; Parameters:    Size  Location     Type
  1288 ;;  dividend        2    6[COMRAM] int 
  1289 ;;  divisor         2    8[COMRAM] int 
  1290 ;; Auto vars:     Size  Location     Type
  1291 ;;  quotient        2   12[COMRAM] int 
  1292 ;;  sign            1   11[COMRAM] unsigned char 
  1293 ;;  counter         1   10[COMRAM] unsigned char 
  1294 ;; Return value:  Size  Location     Type
  1295 ;;                  2    6[COMRAM] int 
  1296 ;; Registers used:
  1297 ;;		wreg, status,2, status,0
  1298 ;; Tracked objects:
  1299 ;;		On entry : 0/0
  1300 ;;		On exit  : 0/0
  1301 ;;		Unchanged: 0/0
  1302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1303 ;;      Params:         4       0       0       0
  1304 ;;      Locals:         4       0       0       0
  1305 ;;      Temps:          0       0       0       0
  1306 ;;      Totals:         8       0       0       0
  1307 ;;Total ram usage:        8 bytes
  1308 ;; Hardware stack levels used:    1
  1309 ;; This function calls:
  1310 ;;		Nothing
  1311 ;; This function is called by:
  1312 ;;		_setMotorPWM
  1313 ;; This function uses a non-reentrant model
  1314 ;;
  1315                           
  1316                           	psect	text10
  1317  001A02                     __ptext10:
  1318                           	opt stack 0
  1319  001A02                     ___awdiv:
  1320                           	opt stack 27
  1321                           
  1322                           ;incstack = 0
  1323  001A02  0E00               	movlw	0
  1324  001A04  6E0C               	movwf	___awdiv@sign,c
  1325  001A06  AE0A               	btfss	___awdiv@divisor+1,7,c
  1326  001A08  D006               	goto	l899
  1327  001A0A  6C09               	negf	___awdiv@divisor,c
  1328  001A0C  1E0A               	comf	___awdiv@divisor+1,f,c
  1329  001A0E  B0D8               	btfsc	status,0,c
  1330  001A10  2A0A               	incf	___awdiv@divisor+1,f,c
  1331  001A12  0E01               	movlw	1
  1332  001A14  6E0C               	movwf	___awdiv@sign,c
  1333  001A16                     l899:
  1334  001A16  AE08               	btfss	___awdiv@dividend+1,7,c
  1335  001A18  D006               	goto	l905
  1336  001A1A  6C07               	negf	___awdiv@dividend,c
  1337  001A1C  1E08               	comf	___awdiv@dividend+1,f,c
  1338  001A1E  B0D8               	btfsc	status,0,c
  1339  001A20  2A08               	incf	___awdiv@dividend+1,f,c
  1340  001A22  0E01               	movlw	1
  1341  001A24  1A0C               	xorwf	___awdiv@sign,f,c
  1342  001A26                     l905:
  1343  001A26  0E00               	movlw	0
  1344  001A28  6E0E               	movwf	___awdiv@quotient+1,c
  1345  001A2A  0E00               	movlw	0
  1346  001A2C  6E0D               	movwf	___awdiv@quotient,c
  1347  001A2E  5009               	movf	___awdiv@divisor,w,c
  1348  001A30  100A               	iorwf	___awdiv@divisor+1,w,c
  1349  001A32  B4D8               	btfsc	status,2,c
  1350  001A34  D01C               	goto	l927
  1351  001A36  0E01               	movlw	1
  1352  001A38  6E0B               	movwf	___awdiv@counter,c
  1353  001A3A  D004               	goto	l913
  1354  001A3C                     l911:
  1355  001A3C  90D8               	bcf	status,0,c
  1356  001A3E  3609               	rlcf	___awdiv@divisor,f,c
  1357  001A40  360A               	rlcf	___awdiv@divisor+1,f,c
  1358  001A42  2A0B               	incf	___awdiv@counter,f,c
  1359  001A44                     l913:
  1360  001A44  AE0A               	btfss	___awdiv@divisor+1,7,c
  1361  001A46  D7FA               	goto	l911
  1362  001A48                     l915:
  1363  001A48  90D8               	bcf	status,0,c
  1364  001A4A  360D               	rlcf	___awdiv@quotient,f,c
  1365  001A4C  360E               	rlcf	___awdiv@quotient+1,f,c
  1366  001A4E  5009               	movf	___awdiv@divisor,w,c
  1367  001A50  5C07               	subwf	___awdiv@dividend,w,c
  1368  001A52  500A               	movf	___awdiv@divisor+1,w,c
  1369  001A54  5808               	subwfb	___awdiv@dividend+1,w,c
  1370  001A56  A0D8               	btfss	status,0,c
  1371  001A58  D005               	goto	l923
  1372  001A5A  5009               	movf	___awdiv@divisor,w,c
  1373  001A5C  5E07               	subwf	___awdiv@dividend,f,c
  1374  001A5E  500A               	movf	___awdiv@divisor+1,w,c
  1375  001A60  5A08               	subwfb	___awdiv@dividend+1,f,c
  1376  001A62  800D               	bsf	___awdiv@quotient,0,c
  1377  001A64                     l923:
  1378  001A64  90D8               	bcf	status,0,c
  1379  001A66  320A               	rrcf	___awdiv@divisor+1,f,c
  1380  001A68  3209               	rrcf	___awdiv@divisor,f,c
  1381  001A6A  2E0B               	decfsz	___awdiv@counter,f,c
  1382  001A6C  D7ED               	goto	l915
  1383  001A6E                     l927:
  1384  001A6E  500C               	movf	___awdiv@sign,w,c
  1385  001A70  B4D8               	btfsc	status,2,c
  1386  001A72  D004               	goto	l931
  1387  001A74  6C0D               	negf	___awdiv@quotient,c
  1388  001A76  1E0E               	comf	___awdiv@quotient+1,f,c
  1389  001A78  B0D8               	btfsc	status,0,c
  1390  001A7A  2A0E               	incf	___awdiv@quotient+1,f,c
  1391  001A7C                     l931:
  1392  001A7C  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  1393  001A80  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  1394  001A84  0012               	return	
  1395  001A86                     __end_of___awdiv:
  1396                           	opt stack 0
  1397                           prodh	equ	0xFF4
  1398                           prodl	equ	0xFF3
  1399                           wreg	equ	0xFE8
  1400                           indf2	equ	0xFDF
  1401                           postinc2	equ	0xFDE
  1402                           postdec2	equ	0xFDD
  1403                           fsr2h	equ	0xFDA
  1404                           fsr2l	equ	0xFD9
  1405                           status	equ	0xFD8
  1406                           
  1407 ;; *************** function _delay_s *****************
  1408 ;; Defined at:
  1409 ;;		line 102 in file "main.c"
  1410 ;; Parameters:    Size  Location     Type
  1411 ;;  seconds         1    wreg     unsigned char 
  1412 ;; Auto vars:     Size  Location     Type
  1413 ;;  seconds         1    2[COMRAM] unsigned char 
  1414 ;;  j               2    5[COMRAM] unsigned int 
  1415 ;;  i               2    3[COMRAM] unsigned int 
  1416 ;; Return value:  Size  Location     Type
  1417 ;;		None               void
  1418 ;; Registers used:
  1419 ;;		wreg, status,2, status,0
  1420 ;; Tracked objects:
  1421 ;;		On entry : 0/0
  1422 ;;		On exit  : 0/0
  1423 ;;		Unchanged: 0/0
  1424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1425 ;;      Params:         0       0       0       0
  1426 ;;      Locals:         5       0       0       0
  1427 ;;      Temps:          2       0       0       0
  1428 ;;      Totals:         7       0       0       0
  1429 ;;Total ram usage:        7 bytes
  1430 ;; Hardware stack levels used:    1
  1431 ;; This function calls:
  1432 ;;		Nothing
  1433 ;; This function is called by:
  1434 ;;		_main
  1435 ;; This function uses a non-reentrant model
  1436 ;;
  1437                           
  1438                           	psect	text11
  1439  001940                     __ptext11:
  1440                           	opt stack 0
  1441  001940                     _delay_s:
  1442                           	opt stack 30
  1443                           
  1444                           ;incstack = 0
  1445                           ;delay_s@seconds stored from wreg
  1446  001940  6E03               	movwf	delay_s@seconds,c
  1447                           
  1448                           ;main.c: 103: unsigned int i=0;
  1449  001942  0E00               	movlw	0
  1450  001944  6E05               	movwf	delay_s@i+1,c
  1451  001946  0E00               	movlw	0
  1452  001948  6E04               	movwf	delay_s@i,c
  1453                           
  1454                           ;main.c: 104: unsigned int j=0;
  1455  00194A  0E00               	movlw	0
  1456  00194C  6E07               	movwf	delay_s@j+1,c
  1457  00194E  0E00               	movlw	0
  1458  001950  6E06               	movwf	delay_s@j,c
  1459                           
  1460                           ;main.c: 105: for (i=1; i<=seconds; i++) {
  1461  001952  0E00               	movlw	0
  1462  001954  6E05               	movwf	delay_s@i+1,c
  1463  001956  0E01               	movlw	1
  1464  001958  6E04               	movwf	delay_s@i,c
  1465  00195A  D016               	goto	l835
  1466  00195C                     l823:
  1467                           
  1468                           ;main.c: 106: for (j=1; j<=20; j++) {
  1469  00195C  0E00               	movlw	0
  1470  00195E  6E07               	movwf	delay_s@j+1,c
  1471  001960  0E01               	movlw	1
  1472  001962  6E06               	movwf	delay_s@j,c
  1473  001964                     l825:
  1474  001964  5007               	movf	delay_s@j+1,w,c
  1475  001966  E10E               	bnz	l833
  1476  001968  0E15               	movlw	21
  1477  00196A  5C06               	subwf	delay_s@j,w,c
  1478  00196C  B0D8               	btfsc	status,0,c
  1479  00196E  D00A               	goto	l833
  1480                           
  1481                           ;main.c: 107: _delay((unsigned long)((50)*(8000000/4000.0)));
  1482  001970  0E82               	movlw	130
  1483  001972  6E01               	movwf	??_delay_s& (0+255),c
  1484  001974  0EDE               	movlw	222
  1485  001976                     u327:
  1486  001976  2EE8               	decfsz	wreg,f,c
  1487  001978  D7FE               	goto	u327
  1488  00197A  2E01               	decfsz	??_delay_s& (0+255),f,c
  1489  00197C  D7FC               	goto	u327
  1490  00197E  4A06               	infsnz	delay_s@j,f,c
  1491  001980  2A07               	incf	delay_s@j+1,f,c
  1492  001982  D7F0               	goto	l825
  1493  001984                     l833:
  1494  001984  4A04               	infsnz	delay_s@i,f,c
  1495  001986  2A05               	incf	delay_s@i+1,f,c
  1496  001988                     l835:
  1497  001988  5003               	movf	delay_s@seconds,w,c
  1498  00198A  6E01               	movwf	??_delay_s& (0+255),c
  1499  00198C  6A02               	clrf	(??_delay_s+1)& (0+255),c
  1500  00198E  5004               	movf	delay_s@i,w,c
  1501  001990  5C01               	subwf	??_delay_s,w,c
  1502  001992  5005               	movf	delay_s@i+1,w,c
  1503  001994  5802               	subwfb	??_delay_s+1,w,c
  1504  001996  A0D8               	btfss	status,0,c
  1505  001998  0012               	return	
  1506  00199A  D7E0               	goto	l823
  1507  00199C                     __end_of_delay_s:
  1508                           	opt stack 0
  1509  0000                     prodh	equ	0xFF4
  1510                           prodl	equ	0xFF3
  1511                           wreg	equ	0xFE8
  1512                           indf2	equ	0xFDF
  1513                           postinc2	equ	0xFDE
  1514                           postdec2	equ	0xFDD
  1515                           fsr2h	equ	0xFDA
  1516                           fsr2l	equ	0xFD9
  1517                           status	equ	0xFD8
  1518                           prodh	equ	0xFF4
  1519                           prodl	equ	0xFF3
  1520                           wreg	equ	0xFE8
  1521                           indf2	equ	0xFDF
  1522                           postinc2	equ	0xFDE
  1523                           postdec2	equ	0xFDD
  1524                           fsr2h	equ	0xFDA
  1525                           fsr2l	equ	0xFD9
  1526                           status	equ	0xFD8
  1527                           
  1528                           	psect	rparam
  1529  0000                     prodh	equ	0xFF4
  1530                           prodl	equ	0xFF3
  1531                           wreg	equ	0xFE8
  1532                           indf2	equ	0xFDF
  1533                           postinc2	equ	0xFDE
  1534                           postdec2	equ	0xFDD
  1535                           fsr2h	equ	0xFDA
  1536                           fsr2l	equ	0xFD9
  1537                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     53      53
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           239      0       0

Pointer List with Targets:

    motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@m_R.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@m_R.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@m_R	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), main@motorL(COMRAM[9]), 

    turnRight@m_L.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@m_L.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@m_L	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), main@motorL(COMRAM[9]), 

    turnLeft@m_R.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@m_R.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@m_R	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), main@motorL(COMRAM[9]), 

    turnLeft@m_L.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@m_L.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@m_L	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), main@motorL(COMRAM[9]), 

    stop@m_R.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@m_R.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@m_R	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), main@motorL(COMRAM[9]), 

    stop@m_L.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@m_L.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@m_L	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), main@motorL(COMRAM[9]), 

    fullSpeed@m_R.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeed@m_R.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeed@m_R	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), main@motorL(COMRAM[9]), 

    fullSpeed@m_L.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeed@m_L.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeed@m_L	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), main@motorL(COMRAM[9]), 

    stopSingleMotor@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stopSingleMotor@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stopSingleMotor@m	PTR struct DC_motor size(2) Largest target is 2
		 -> stop@m_R(COMRAM[2]), stop@m_L(COMRAM[2]), 

    setSingleMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setSingleMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setSingleMotorFullSpeed@m	PTR struct DC_motor size(2) Largest target is 2
		 -> turnRight@m_R(COMRAM[2]), turnRight@m_L(COMRAM[2]), turnLeft@m_R(COMRAM[2]), turnLeft@m_L(COMRAM[2]), 
		 -> fullSpeed@m_R(COMRAM[2]), fullSpeed@m_L(COMRAM[2]), 

    S27DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S27DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 2
		 -> turnRight@m_R(COMRAM[2]), turnRight@m_L(COMRAM[2]), turnLeft@m_R(COMRAM[2]), turnLeft@m_L(COMRAM[2]), 
		 -> stop@m_R(COMRAM[2]), stop@m_L(COMRAM[2]), fullSpeed@m_R(COMRAM[2]), fullSpeed@m_L(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_stop
    _turnRight->_setSingleMotorFullSpeed
    _turnLeft->_setSingleMotorFullSpeed
    _stop->_stopSingleMotor
    _stopSingleMotor->_setMotorPWM
    _fullSpeed->_setSingleMotorFullSpeed
    _setSingleMotorFullSpeed->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                18    18      0    8521
                                             35 COMRAM    18    18      0
                            _delay_s
                          _fullSpeed
                            _initPWM
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _turnRight                                            4     0      4    1968
                                             24 COMRAM     4     0      4
            _setSingleMotorFullSpeed
 ---------------------------------------------------------------------------------
 (1) _turnLeft                                             4     0      4    1968
                                             24 COMRAM     4     0      4
            _setSingleMotorFullSpeed
 ---------------------------------------------------------------------------------
 (1) _stop                                                11     7      4    2015
                                             24 COMRAM    11     7      4
                    _stopSingleMotor
 ---------------------------------------------------------------------------------
 (2) _stopSingleMotor                                      3     1      2    1468
                                             21 COMRAM     3     1      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _initPWM                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fullSpeed                                            4     0      4    1968
                                             24 COMRAM     4     0      4
            _setSingleMotorFullSpeed
 ---------------------------------------------------------------------------------
 (2) _setSingleMotorFullSpeed                              3     1      2    1724
                                             21 COMRAM     3     1      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          7     5      2    1274
                                             14 COMRAM     7     5      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     347
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     488
                                              6 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _delay_s                                              7     7      0      60
                                              0 COMRAM     7     7      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _delay_s
   _fullSpeed
     _setSingleMotorFullSpeed
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _initPWM
   _stop
     _stopSingleMotor
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _turnLeft
     _setSingleMotorFullSpeed
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _turnRight
     _setSingleMotorFullSpeed
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F     35      35       1       55.8%
STACK                0      0       0       2        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0       0       4        0.0%
ABS                  0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2            EF      0       0       8        0.0%
BANK2               EF      0       0       9        0.0%
BIGRAM             2EE      0       0      10        0.0%
DATA                 0      0       0      11        0.0%
BITSFR_5             0      0       0      40        0.0%
SFR_5                0      0       0      40        0.0%
BITSFR_4             0      0       0      40        0.0%
SFR_4                0      0       0      40        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Tue Feb 20 11:50:47 2018

                              l85 1A8A                      ___awdiv@sign 000C  
             ___wmul@multiplicand 0003                               l823 195C  
                             l911 1A3C                               l833 1984  
                             l825 1964                               l913 1A44  
                             l905 1A26                               l835 1988  
                             l931 1A7C                               l923 1A64  
                             l915 1A48                               l941 1C3E  
                             l927 1A6E                               l951 1CD6  
                             l961 184C                               l939 1BF8  
                             l955 1828                               l971 1882  
                             l965 185E                               l899 1A16  
                             u307 1870                               u317 183A  
                             u254 1CCA                               u327 1976  
                             u255 1CC6                               u264 1CF2  
                             u265 1CEE                               wreg 000FE8  
                            l1029 1AF2                              _LATB 000F8A  
                            _main 1A86                              fsr2h 000FDA  
                            indf2 000FDF                              fsr2l 000FD9  
                            _stop 199C                              prodh 000FF4  
                            prodl 000FF3                              start 0002  
                  delay_s@seconds 0003                      ___param_bank 000010  
                ?_stopSingleMotor 0016           _setSingleMotorFullSpeed 1826  
                           ?_main 0001                   __end_of___awdiv 1A86  
                           ?_stop 0019                   ___awdiv@divisor 0009  
                           _PDC0H 000F78                             _PDC1H 000F76  
                           _PDC0L 000F79                             _PDC1L 000F77  
                 ___awdiv@counter 000B                   __end_of_delay_s 199C  
                 __end_of_initPWM 1800                             stop@i 0022  
                           status 000FD8                   __initialization 17E0  
                    __end_of_main 1B7E                      __end_of_stop 1A02  
                  __CFG_OSC$IRCIO 000000                            ??_main 0024  
                          ??_stop 001D                     __activetblptr 000000  
                    ?_setMotorPWM 000F                            _ADCON0 000FC2  
                          _ADCON1 000FC1                            _ADCON2 000FC0  
                ___awdiv@dividend 0007                    __CFG_WDTEN$OFF 000000  
                          _OSCCON 000FD3                            _PTCON0 000F7F  
                          _PTCON1 000F7E                            _PTPERH 000F7A  
                          _PTPERL 000F7B         ??_setSingleMotorFullSpeed 0018  
                          ___wmul 1800                         ??___awdiv 000B  
                ___awdiv@quotient 000D                         ??_delay_s 0001  
                       ??_initPWM 0001                  __end_of_turnLeft 1906  
                      __accesstop 0060           __end_of__initialization 17E0  
                   ___rparam_used 000001                    __pcstackCOMRAM 0001  
 __end_of_setSingleMotorFullSpeed 185C                __size_of_fullSpeed 003A  
                         ?___wmul 0001                           _PWMCON0 000F6F  
                         _PWMCON1 000F6E              __size_of_setMotorPWM 0182  
              __size_of_turnRight 003A                           __Hparam 0000  
                         __Lparam 0000                      fullSpeed@m_L 0019  
                    fullSpeed@m_R 001B                           ___awdiv 1A02  
                 __size_of___wmul 0026                           __pcinit 17E0  
                         _delay_s 1940                           __ramtop 0300  
                       ?_turnLeft 0019                           __ptext0 1A86  
                         __ptext1 1906                           __ptext2 18CC  
                         __ptext3 199C                           __ptext4 185C  
                         __ptext5 17E6                           __ptext6 1892  
                         __ptext7 1826                           __ptext8 1B7E  
                         __ptext9 1800          __size_of_stopSingleMotor 0036  
                         _initPWM 17E6                 __end_of_fullSpeed 18CC  
                stopSingleMotor@m 0016          setSingleMotorFullSpeed@m 0016  
            end_of_initialization 17E0                setMotorPWM@PWMduty 0014  
                    turnRight@m_L 0019                      turnRight@m_R 001B  
                         postdec2 000FDD                           postinc2 000FDE  
                         stop@m_L 0019                           stop@m_R 001B  
                      ??_turnLeft 001D                 __end_of_turnRight 1940  
                       _TRISAbits 000F92                         _TRISBbits 000F93  
                      main@motorL 0024                        main@motorR 002D  
                  __end_of___wmul 1826               start_initialization 17E0  
               ??_stopSingleMotor 0018          ?_setSingleMotorFullSpeed 0016  
                        ??___wmul 0005                          ?___awdiv 0007  
                        ?_delay_s 0001                          ?_initPWM 0001  
               __size_of_turnLeft 003A                     ??_setMotorPWM 0011  
                       _fullSpeed 1892                       turnLeft@m_L 0019  
                     turnLeft@m_R 001B                    ___wmul@product 0005  
               ___wmul@multiplier 0001                      setMotorPWM@m 000F  
                       _turnRight 1906                        ?_fullSpeed 0019  
             __end_of_setMotorPWM 1D00                          __Hrparam 0000  
                        __Lrparam 0000                  __size_of___awdiv 0084  
                      _ANSEL0bits 000FB8                   _stopSingleMotor 185C  
                __size_of_delay_s 005C                  __size_of_initPWM 001A  
                      ?_turnRight 0019                          __ptext10 1A02  
                        __ptext11 1940                     __size_of_main 00F8  
                   __size_of_stop 0066                          delay_s@i 0004  
                        delay_s@j 0006  __size_of_setSingleMotorFullSpeed 0036  
                        _turnLeft 18CC                       ??_fullSpeed 001D  
                     _setMotorPWM 1B7E                         stop@temp2 0020  
                      _OSCCONbits 000FD3           __end_of_stopSingleMotor 1892  
                        stop@temp 001E                       ??_turnRight 001D  
