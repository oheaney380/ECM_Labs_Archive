

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Tue Feb 27 11:55:05 2018

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
     7                           	psect	text0,global,reloc=2,class=CODE,delta=1
     8                           	psect	text1,global,reloc=2,class=CODE,delta=1
     9                           	psect	text2,global,reloc=2,class=CODE,delta=1
    10                           	psect	text3,global,reloc=2,class=CODE,delta=1
    11                           	psect	text4,global,reloc=2,class=CODE,delta=1
    12                           	psect	text5,global,reloc=2,class=CODE,delta=1
    13                           	psect	text6,global,reloc=2,class=CODE,delta=1
    14                           	psect	text7,global,reloc=2,class=CODE,delta=1
    15                           	psect	text8,global,reloc=2,class=CODE,delta=1
    16                           	psect	text9,global,reloc=2,class=CODE,delta=1
    17                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    18                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    19  0000                     _ADCON0	set	4034
    20  0000                     _ADCON1	set	4033
    21  0000                     _ADCON2	set	4032
    22  0000                     _ANSEL0bits	set	4024
    23  0000                     _LATB	set	3978
    24  0000                     _OSCCON	set	4051
    25  0000                     _OSCCONbits	set	4051
    26  0000                     _PTCON0	set	3967
    27  0000                     _PTCON1	set	3966
    28  0000                     _PTPERH	set	3962
    29  0000                     _PTPERL	set	3963
    30  0000                     _PWMCON0	set	3951
    31  0000                     _PWMCON1	set	3950
    32  0000                     _TRISAbits	set	3986
    33  0000                     _TRISBbits	set	3987
    34  0000                     _PDC0H	set	3960
    35  0000                     _PDC0L	set	3961
    36  0000                     _PDC1H	set	3958
    37  0000                     _PDC1L	set	3959
    38                           
    39                           ; #config settings
    40  0000                     
    41                           	psect	cinit
    42  001B26                     __pcinit:
    43                           	opt stack 0
    44  001B26                     start_initialization:
    45                           	opt stack 0
    46  001B26                     __initialization:
    47                           	opt stack 0
    48  001B26                     end_of_initialization:
    49                           	opt stack 0
    50  001B26                     __end_of__initialization:
    51                           	opt stack 0
    52  001B26  0100               	movlb	0
    53  001B28  EFD4  F00E         	goto	_main	;jump to C main() function
    54                           
    55                           	psect	cstackCOMRAM
    56  000001                     __pcstackCOMRAM:
    57                           	opt stack 0
    58  000001                     ??_delay_s:
    59  000001                     ?___wmul:
    60                           	opt stack 0
    61  000001                     ___wmul@multiplier:
    62                           	opt stack 0
    63                           
    64                           ; 2 bytes @ 0x0
    65  000001                     	ds	2
    66  000003                     delay_s@seconds:
    67                           	opt stack 0
    68  000003                     ___wmul@multiplicand:
    69                           	opt stack 0
    70                           
    71                           ; 2 bytes @ 0x2
    72  000003                     	ds	1
    73  000004                     delay_s@i:
    74                           	opt stack 0
    75                           
    76                           ; 2 bytes @ 0x3
    77  000004                     	ds	1
    78  000005                     ___wmul@product:
    79                           	opt stack 0
    80                           
    81                           ; 2 bytes @ 0x4
    82  000005                     	ds	1
    83  000006                     delay_s@j:
    84                           	opt stack 0
    85                           
    86                           ; 2 bytes @ 0x5
    87  000006                     	ds	1
    88  000007                     ?___awdiv:
    89                           	opt stack 0
    90  000007                     ___awdiv@dividend:
    91                           	opt stack 0
    92                           
    93                           ; 2 bytes @ 0x6
    94  000007                     	ds	2
    95  000009                     ___awdiv@divisor:
    96                           	opt stack 0
    97                           
    98                           ; 2 bytes @ 0x8
    99  000009                     	ds	2
   100  00000B                     ___awdiv@counter:
   101                           	opt stack 0
   102                           
   103                           ; 1 bytes @ 0xA
   104  00000B                     	ds	1
   105  00000C                     ___awdiv@sign:
   106                           	opt stack 0
   107                           
   108                           ; 1 bytes @ 0xB
   109  00000C                     	ds	1
   110  00000D                     ___awdiv@quotient:
   111                           	opt stack 0
   112                           
   113                           ; 2 bytes @ 0xC
   114  00000D                     	ds	2
   115  00000F                     setMotorPWM@m:
   116                           	opt stack 0
   117                           
   118                           ; 2 bytes @ 0xE
   119  00000F                     	ds	2
   120  000011                     ??_setMotorPWM:
   121                           
   122                           ; 0 bytes @ 0x10
   123  000011                     	ds	3
   124  000014                     setMotorPWM@PWMduty:
   125                           	opt stack 0
   126                           
   127                           ; 2 bytes @ 0x13
   128  000014                     	ds	2
   129  000016                     fullSpeed@m_L:
   130                           	opt stack 0
   131  000016                     stop@m_L:
   132                           	opt stack 0
   133                           
   134                           ; 2 bytes @ 0x15
   135  000016                     	ds	2
   136  000018                     fullSpeed@m_R:
   137                           	opt stack 0
   138  000018                     stop@m_R:
   139                           	opt stack 0
   140                           
   141                           ; 2 bytes @ 0x17
   142  000018                     	ds	2
   143  00001A                     
   144                           ; 0 bytes @ 0x19
   145  00001A                     	ds	1
   146  00001B                     turnLeft@m_L:
   147                           	opt stack 0
   148  00001B                     turnRight@m_L:
   149                           	opt stack 0
   150                           
   151                           ; 2 bytes @ 0x1A
   152  00001B                     	ds	2
   153  00001D                     turnLeft@m_R:
   154                           	opt stack 0
   155  00001D                     turnRight@m_R:
   156                           	opt stack 0
   157                           
   158                           ; 2 bytes @ 0x1C
   159  00001D                     	ds	2
   160  00001F                     main@motorL:
   161                           	opt stack 0
   162                           
   163                           ; 9 bytes @ 0x1E
   164  00001F                     	ds	9
   165  000028                     main@motorR:
   166                           	opt stack 0
   167                           
   168                           ; 9 bytes @ 0x27
   169  000028                     	ds	9
   170                           
   171 ;;
   172 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   173 ;;
   174 ;; *************** function _main *****************
   175 ;; Defined at:
   176 ;;		line 126 in file "main.c"
   177 ;; Parameters:    Size  Location     Type
   178 ;;		None
   179 ;; Auto vars:     Size  Location     Type
   180 ;;  motorR          9   39[COMRAM] struct DC_motor
   181 ;;  motorL          9   30[COMRAM] struct DC_motor
   182 ;; Return value:  Size  Location     Type
   183 ;;		None               void
   184 ;; Registers used:
   185 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   186 ;; Tracked objects:
   187 ;;		On entry : 0/0
   188 ;;		On exit  : 0/0
   189 ;;		Unchanged: 0/0
   190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   191 ;;      Params:         0       0       0       0
   192 ;;      Locals:        18       0       0       0
   193 ;;      Temps:          0       0       0       0
   194 ;;      Totals:        18       0       0       0
   195 ;;Total ram usage:       18 bytes
   196 ;; Hardware stack levels required when called:    4
   197 ;; This function calls:
   198 ;;		_delay_s
   199 ;;		_fullSpeed
   200 ;;		_initPWM
   201 ;;		_stop
   202 ;;		_turnLeft
   203 ;;		_turnRight
   204 ;; This function is called by:
   205 ;;		Startup code after reset
   206 ;; This function uses a non-reentrant model
   207 ;;
   208                           
   209                           	psect	text0
   210  001DA8                     __ptext0:
   211                           	opt stack 0
   212  001DA8                     _main:
   213                           	opt stack 27
   214                           
   215                           ;main.c: 127: OSCCON = 0x72;
   216                           
   217                           ;incstack = 0
   218  001DA8  0E72               	movlw	114
   219  001DAA  6ED3               	movwf	4051,c	;volatile
   220  001DAC                     l95:
   221  001DAC  A4D3               	btfss	4051,2,c	;volatile
   222  001DAE  D7FE               	goto	l95
   223                           
   224                           ;main.c: 131: TRISBbits.RB0=0;
   225  001DB0  9093               	bcf	3987,0,c	;volatile
   226                           
   227                           ;main.c: 132: TRISBbits.RB1=0;
   228  001DB2  9293               	bcf	3987,1,c	;volatile
   229                           
   230                           ;main.c: 133: TRISBbits.RB2=0;
   231  001DB4  9493               	bcf	3987,2,c	;volatile
   232                           
   233                           ;main.c: 134: TRISBbits.RB3=0;
   234  001DB6  9693               	bcf	3987,3,c	;volatile
   235                           
   236                           ;main.c: 136: TRISAbits.RA3=1;
   237  001DB8  8692               	bsf	3986,3,c	;volatile
   238                           
   239                           ;main.c: 137: ANSEL0bits.ANS3=1;
   240  001DBA  86B8               	bsf	4024,3,c	;volatile
   241                           
   242                           ;main.c: 139: ADCON0=0b00001101;
   243  001DBC  0E0D               	movlw	13
   244  001DBE  6EC2               	movwf	4034,c	;volatile
   245                           
   246                           ;main.c: 140: ADCON1=0b00000000;
   247  001DC0  0E00               	movlw	0
   248  001DC2  6EC1               	movwf	4033,c	;volatile
   249                           
   250                           ;main.c: 142: ADCON2=0b10101011;
   251  001DC4  0EAB               	movlw	171
   252  001DC6  6EC0               	movwf	4032,c	;volatile
   253                           
   254                           ;main.c: 144: initPWM();
   255  001DC8  ECA9  F00D         	call	_initPWM	;wreg free
   256                           
   257                           ;main.c: 146: struct DC_motor motorL, motorR;
   258                           ;main.c: 147: motorL.power=0;
   259  001DCC  0E00               	movlw	0
   260  001DCE  6E1F               	movwf	main@motorL,c
   261                           
   262                           ;main.c: 148: motorL.direction=1;
   263  001DD0  0E01               	movlw	1
   264  001DD2  6E20               	movwf	main@motorL+1,c
   265                           
   266                           ;main.c: 149: motorL.dutyLowByte=(unsigned char *)(&PDC0L);
   267  001DD4  0E79               	movlw	121
   268  001DD6  6E21               	movwf	main@motorL+2,c
   269  001DD8  0E0F               	movlw	15
   270  001DDA  6E22               	movwf	main@motorL+3,c
   271                           
   272                           ;main.c: 150: motorL.dutyHighByte=(unsigned char *)(&PDC0H);
   273  001DDC  0E78               	movlw	120
   274  001DDE  6E23               	movwf	main@motorL+4,c
   275  001DE0  0E0F               	movlw	15
   276  001DE2  6E24               	movwf	main@motorL+5,c
   277                           
   278                           ;main.c: 151: motorL.dir_pin=0;
   279  001DE4  0E00               	movlw	0
   280  001DE6  6E25               	movwf	main@motorL+6,c
   281                           
   282                           ;main.c: 152: motorL.PWMperiod=199;
   283  001DE8  0E00               	movlw	0
   284  001DEA  6E27               	movwf	main@motorL+8,c
   285  001DEC  0EC7               	movlw	199
   286  001DEE  6E26               	movwf	main@motorL+7,c
   287                           
   288                           ;main.c: 154: motorR.power=0;
   289  001DF0  0E00               	movlw	0
   290  001DF2  6E28               	movwf	main@motorR,c
   291                           
   292                           ;main.c: 155: motorR.direction=1;
   293  001DF4  0E01               	movlw	1
   294  001DF6  6E29               	movwf	main@motorR+1,c
   295                           
   296                           ;main.c: 156: motorR.dutyLowByte=(unsigned char *)(&PDC1L);
   297  001DF8  0E77               	movlw	119
   298  001DFA  6E2A               	movwf	main@motorR+2,c
   299  001DFC  0E0F               	movlw	15
   300  001DFE  6E2B               	movwf	main@motorR+3,c
   301                           
   302                           ;main.c: 157: motorR.dutyHighByte=(unsigned char *)(&PDC1H);
   303  001E00  0E76               	movlw	118
   304  001E02  6E2C               	movwf	main@motorR+4,c
   305  001E04  0E0F               	movlw	15
   306  001E06  6E2D               	movwf	main@motorR+5,c
   307                           
   308                           ;main.c: 158: motorR.dir_pin=2;
   309  001E08  0E02               	movlw	2
   310  001E0A  6E2E               	movwf	main@motorR+6,c
   311                           
   312                           ;main.c: 159: motorR.PWMperiod=199;
   313  001E0C  0E00               	movlw	0
   314  001E0E  6E30               	movwf	main@motorR+8,c
   315  001E10  0EC7               	movlw	199
   316  001E12  6E2F               	movwf	main@motorR+7,c
   317  001E14                     l1069:
   318                           
   319                           ;main.c: 163: delay_s(5);
   320  001E14  0E05               	movlw	5
   321  001E16  ECF4  F00D         	call	_delay_s
   322                           
   323                           ;main.c: 164: fullSpeed(&motorL, &motorR);
   324  001E1A  0E1F               	movlw	low main@motorL
   325  001E1C  6E16               	movwf	fullSpeed@m_L,c
   326  001E1E  0E00               	movlw	high main@motorL
   327  001E20  6E17               	movwf	fullSpeed@m_L+1,c
   328  001E22  0E28               	movlw	low main@motorR
   329  001E24  6E18               	movwf	fullSpeed@m_R,c
   330  001E26  0E00               	movlw	high main@motorR
   331  001E28  6E19               	movwf	fullSpeed@m_R+1,c
   332  001E2A  EC5A  F00E         	call	_fullSpeed	;wreg free
   333                           
   334                           ;main.c: 166: delay_s(5);
   335  001E2E  0E05               	movlw	5
   336  001E30  ECF4  F00D         	call	_delay_s
   337                           
   338                           ;main.c: 167: stop(&motorL, &motorR);
   339  001E34  0E1F               	movlw	low main@motorL
   340  001E36  6E16               	movwf	stop@m_L,c
   341  001E38  0E00               	movlw	high main@motorL
   342  001E3A  6E17               	movwf	stop@m_L+1,c
   343  001E3C  0E28               	movlw	low main@motorR
   344  001E3E  6E18               	movwf	stop@m_R,c
   345  001E40  0E00               	movlw	high main@motorR
   346  001E42  6E19               	movwf	stop@m_R+1,c
   347  001E44  EC22  F00E         	call	_stop	;wreg free
   348                           
   349                           ;main.c: 169: delay_s(5);
   350  001E48  0E05               	movlw	5
   351  001E4A  ECF4  F00D         	call	_delay_s
   352                           
   353                           ;main.c: 170: turnLeft(&motorL, &motorR);
   354  001E4E  0E1F               	movlw	low main@motorL
   355  001E50  6E1B               	movwf	turnLeft@m_L,c
   356  001E52  0E00               	movlw	high main@motorL
   357  001E54  6E1C               	movwf	turnLeft@m_L+1,c
   358  001E56  0E28               	movlw	low main@motorR
   359  001E58  6E1D               	movwf	turnLeft@m_R,c
   360  001E5A  0E00               	movlw	high main@motorR
   361  001E5C  6E1E               	movwf	turnLeft@m_R+1,c
   362  001E5E  ECBE  F00D         	call	_turnLeft	;wreg free
   363                           
   364                           ;main.c: 172: delay_s(5);
   365  001E62  0E05               	movlw	5
   366  001E64  ECF4  F00D         	call	_delay_s
   367                           
   368                           ;main.c: 173: turnRight(&motorL, &motorR);
   369  001E68  0E1F               	movlw	low main@motorL
   370  001E6A  6E1B               	movwf	turnRight@m_L,c
   371  001E6C  0E00               	movlw	high main@motorL
   372  001E6E  6E1C               	movwf	turnRight@m_L+1,c
   373  001E70  0E28               	movlw	low main@motorR
   374  001E72  6E1D               	movwf	turnRight@m_R,c
   375  001E74  0E00               	movlw	high main@motorR
   376  001E76  6E1E               	movwf	turnRight@m_R+1,c
   377  001E78  ECD9  F00D         	call	_turnRight	;wreg free
   378  001E7C  D7CB               	goto	l1069
   379  001E7E                     __end_of_main:
   380                           	opt stack 0
   381                           
   382 ;; *************** function _turnRight *****************
   383 ;; Defined at:
   384 ;;		line 106 in file "main.c"
   385 ;; Parameters:    Size  Location     Type
   386 ;;  m_L             2   26[COMRAM] PTR struct DC_motor
   387 ;;		 -> main@motorL(9), 
   388 ;;  m_R             2   28[COMRAM] PTR struct DC_motor
   389 ;;		 -> main@motorR(9), 
   390 ;; Auto vars:     Size  Location     Type
   391 ;;		None
   392 ;; Return value:  Size  Location     Type
   393 ;;		None               void
   394 ;; Registers used:
   395 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   396 ;; Tracked objects:
   397 ;;		On entry : 0/0
   398 ;;		On exit  : 0/0
   399 ;;		Unchanged: 0/0
   400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   401 ;;      Params:         4       0       0       0
   402 ;;      Locals:         0       0       0       0
   403 ;;      Temps:          0       0       0       0
   404 ;;      Totals:         4       0       0       0
   405 ;;Total ram usage:        4 bytes
   406 ;; Hardware stack levels used:    1
   407 ;; Hardware stack levels required when called:    3
   408 ;; This function calls:
   409 ;;		_fullSpeed
   410 ;; This function is called by:
   411 ;;		_main
   412 ;; This function uses a non-reentrant model
   413 ;;
   414                           
   415                           	psect	text1
   416  001BB2                     __ptext1:
   417                           	opt stack 0
   418  001BB2                     _turnRight:
   419                           	opt stack 27
   420                           
   421                           ;main.c: 108: m_L->direction=1;
   422                           
   423                           ;incstack = 0
   424  001BB2  EE20 F001          	lfsr	2,1
   425  001BB6  501B               	movf	turnRight@m_L,w,c
   426  001BB8  26D9               	addwf	fsr2l,f,c
   427  001BBA  501C               	movf	turnRight@m_L+1,w,c
   428  001BBC  22DA               	addwfc	fsr2h,f,c
   429  001BBE  0E01               	movlw	1
   430  001BC0  6EDF               	movwf	indf2,c
   431                           
   432                           ;main.c: 109: m_R->direction=0;
   433  001BC2  EE20 F001          	lfsr	2,1
   434  001BC6  501D               	movf	turnRight@m_R,w,c
   435  001BC8  26D9               	addwf	fsr2l,f,c
   436  001BCA  501E               	movf	turnRight@m_R+1,w,c
   437  001BCC  22DA               	addwfc	fsr2h,f,c
   438  001BCE  0E00               	movlw	0
   439  001BD0  6EDF               	movwf	indf2,c
   440                           
   441                           ;main.c: 110: fullSpeed(m_L, m_R);
   442  001BD2  C01B  F016         	movff	turnRight@m_L,fullSpeed@m_L
   443  001BD6  C01C  F017         	movff	turnRight@m_L+1,fullSpeed@m_L+1
   444  001BDA  C01D  F018         	movff	turnRight@m_R,fullSpeed@m_R
   445  001BDE  C01E  F019         	movff	turnRight@m_R+1,fullSpeed@m_R+1
   446  001BE2  EC5A  F00E         	call	_fullSpeed	;wreg free
   447  001BE6  0012               	return		;funcret
   448  001BE8                     __end_of_turnRight:
   449                           	opt stack 0
   450                           indf2	equ	0xFDF
   451                           fsr2h	equ	0xFDA
   452                           fsr2l	equ	0xFD9
   453                           
   454 ;; *************** function _turnLeft *****************
   455 ;; Defined at:
   456 ;;		line 99 in file "main.c"
   457 ;; Parameters:    Size  Location     Type
   458 ;;  m_L             2   26[COMRAM] PTR struct DC_motor
   459 ;;		 -> main@motorL(9), 
   460 ;;  m_R             2   28[COMRAM] PTR struct DC_motor
   461 ;;		 -> main@motorR(9), 
   462 ;; Auto vars:     Size  Location     Type
   463 ;;		None
   464 ;; Return value:  Size  Location     Type
   465 ;;		None               void
   466 ;; Registers used:
   467 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   468 ;; Tracked objects:
   469 ;;		On entry : 0/0
   470 ;;		On exit  : 0/0
   471 ;;		Unchanged: 0/0
   472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   473 ;;      Params:         4       0       0       0
   474 ;;      Locals:         0       0       0       0
   475 ;;      Temps:          0       0       0       0
   476 ;;      Totals:         4       0       0       0
   477 ;;Total ram usage:        4 bytes
   478 ;; Hardware stack levels used:    1
   479 ;; Hardware stack levels required when called:    3
   480 ;; This function calls:
   481 ;;		_fullSpeed
   482 ;; This function is called by:
   483 ;;		_main
   484 ;; This function uses a non-reentrant model
   485 ;;
   486                           
   487                           	psect	text2
   488  001B7C                     __ptext2:
   489                           	opt stack 0
   490  001B7C                     _turnLeft:
   491                           	opt stack 27
   492                           
   493                           ;main.c: 101: m_L->direction=0;
   494                           
   495                           ;incstack = 0
   496  001B7C  EE20 F001          	lfsr	2,1
   497  001B80  501B               	movf	turnLeft@m_L,w,c
   498  001B82  26D9               	addwf	fsr2l,f,c
   499  001B84  501C               	movf	turnLeft@m_L+1,w,c
   500  001B86  22DA               	addwfc	fsr2h,f,c
   501  001B88  0E00               	movlw	0
   502  001B8A  6EDF               	movwf	indf2,c
   503                           
   504                           ;main.c: 102: m_R->direction=1;
   505  001B8C  EE20 F001          	lfsr	2,1
   506  001B90  501D               	movf	turnLeft@m_R,w,c
   507  001B92  26D9               	addwf	fsr2l,f,c
   508  001B94  501E               	movf	turnLeft@m_R+1,w,c
   509  001B96  22DA               	addwfc	fsr2h,f,c
   510  001B98  0E01               	movlw	1
   511  001B9A  6EDF               	movwf	indf2,c
   512                           
   513                           ;main.c: 103: fullSpeed(m_L, m_R);
   514  001B9C  C01B  F016         	movff	turnLeft@m_L,fullSpeed@m_L
   515  001BA0  C01C  F017         	movff	turnLeft@m_L+1,fullSpeed@m_L+1
   516  001BA4  C01D  F018         	movff	turnLeft@m_R,fullSpeed@m_R
   517  001BA8  C01E  F019         	movff	turnLeft@m_R+1,fullSpeed@m_R+1
   518  001BAC  EC5A  F00E         	call	_fullSpeed	;wreg free
   519  001BB0  0012               	return		;funcret
   520  001BB2                     __end_of_turnLeft:
   521                           	opt stack 0
   522                           indf2	equ	0xFDF
   523                           fsr2h	equ	0xFDA
   524                           fsr2l	equ	0xFD9
   525                           
   526 ;; *************** function _fullSpeed *****************
   527 ;; Defined at:
   528 ;;		line 69 in file "main.c"
   529 ;; Parameters:    Size  Location     Type
   530 ;;  m_L             2   21[COMRAM] PTR struct DC_motor
   531 ;;		 -> main@motorL(9), 
   532 ;;  m_R             2   23[COMRAM] PTR struct DC_motor
   533 ;;		 -> main@motorR(9), 
   534 ;; Auto vars:     Size  Location     Type
   535 ;;		None
   536 ;; Return value:  Size  Location     Type
   537 ;;		None               void
   538 ;; Registers used:
   539 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   540 ;; Tracked objects:
   541 ;;		On entry : 0/0
   542 ;;		On exit  : 0/0
   543 ;;		Unchanged: 0/0
   544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   545 ;;      Params:         4       0       0       0
   546 ;;      Locals:         0       0       0       0
   547 ;;      Temps:          1       0       0       0
   548 ;;      Totals:         5       0       0       0
   549 ;;Total ram usage:        5 bytes
   550 ;; Hardware stack levels used:    1
   551 ;; Hardware stack levels required when called:    2
   552 ;; This function calls:
   553 ;;		_setMotorPWM
   554 ;; This function is called by:
   555 ;;		_turnLeft
   556 ;;		_turnRight
   557 ;;		_main
   558 ;; This function uses a non-reentrant model
   559 ;;
   560                           
   561                           	psect	text3
   562  001CB4                     __ptext3:
   563                           	opt stack 0
   564  001CB4                     _fullSpeed:
   565                           	opt stack 27
   566                           
   567                           ;main.c: 71: while(m_L->power<100 || m_R->power<100){
   568                           
   569                           ;incstack = 0
   570  001CB4  D028               	goto	l65
   571  001CB6                     l979:
   572                           
   573                           ;main.c: 72: if(m_L->power<100){
   574  001CB6  C016  FFD9         	movff	fullSpeed@m_L,fsr2l
   575  001CBA  C017  FFDA         	movff	fullSpeed@m_L+1,fsr2h
   576  001CBE  0E64               	movlw	100
   577  001CC0  60DF               	cpfslt	indf2,c
   578  001CC2  D005               	goto	l983
   579                           
   580                           ;main.c: 73: m_L->power++;
   581  001CC4  C016  FFD9         	movff	fullSpeed@m_L,fsr2l
   582  001CC8  C017  FFDA         	movff	fullSpeed@m_L+1,fsr2h
   583  001CCC  2ADF               	incf	indf2,f,c
   584  001CCE                     l983:
   585                           
   586                           ;main.c: 74: }
   587                           ;main.c: 75: if(m_R->power<100){
   588  001CCE  C018  FFD9         	movff	fullSpeed@m_R,fsr2l
   589  001CD2  C019  FFDA         	movff	fullSpeed@m_R+1,fsr2h
   590  001CD6  0E64               	movlw	100
   591  001CD8  60DF               	cpfslt	indf2,c
   592  001CDA  D005               	goto	l987
   593                           
   594                           ;main.c: 76: m_R->power++;
   595  001CDC  C018  FFD9         	movff	fullSpeed@m_R,fsr2l
   596  001CE0  C019  FFDA         	movff	fullSpeed@m_R+1,fsr2h
   597  001CE4  2ADF               	incf	indf2,f,c
   598  001CE6                     l987:
   599                           
   600                           ;main.c: 77: }
   601                           ;main.c: 78: setMotorPWM(m_L);
   602  001CE6  C016  F00F         	movff	fullSpeed@m_L,setMotorPWM@m
   603  001CEA  C017  F010         	movff	fullSpeed@m_L+1,setMotorPWM@m+1
   604  001CEE  EC3F  F00F         	call	_setMotorPWM	;wreg free
   605                           
   606                           ;main.c: 79: setMotorPWM(m_R);
   607  001CF2  C018  F00F         	movff	fullSpeed@m_R,setMotorPWM@m
   608  001CF6  C019  F010         	movff	fullSpeed@m_R+1,setMotorPWM@m+1
   609  001CFA  EC3F  F00F         	call	_setMotorPWM	;wreg free
   610                           
   611                           ;main.c: 80: _delay((unsigned long)((50)*(8000000/4000000.0)));
   612  001CFE  0E21               	movlw	33
   613  001D00                     u467:
   614  001D00  2EE8               	decfsz	wreg,f,c
   615  001D02  D7FE               	goto	u467
   616  001D04  F000               	nop	
   617  001D06                     l65:
   618  001D06  C016  FFD9         	movff	fullSpeed@m_L,fsr2l
   619  001D0A  C017  FFDA         	movff	fullSpeed@m_L+1,fsr2h
   620  001D0E  0E63               	movlw	99
   621  001D10  64DF               	cpfsgt	indf2,c
   622  001D12  D7D1               	goto	l979
   623  001D14  C018  FFD9         	movff	fullSpeed@m_R,fsr2l
   624  001D18  C019  FFDA         	movff	fullSpeed@m_R+1,fsr2h
   625  001D1C  0E63               	movlw	99
   626  001D1E  64DF               	cpfsgt	indf2,c
   627  001D20  D7CA               	goto	l979
   628  001D22  0012               	return	
   629  001D24                     __end_of_fullSpeed:
   630                           	opt stack 0
   631                           wreg	equ	0xFE8
   632                           indf2	equ	0xFDF
   633                           fsr2h	equ	0xFDA
   634                           fsr2l	equ	0xFD9
   635                           
   636 ;; *************** function _stop *****************
   637 ;; Defined at:
   638 ;;		line 84 in file "main.c"
   639 ;; Parameters:    Size  Location     Type
   640 ;;  m_L             2   21[COMRAM] PTR struct DC_motor
   641 ;;		 -> main@motorL(9), 
   642 ;;  m_R             2   23[COMRAM] PTR struct DC_motor
   643 ;;		 -> main@motorR(9), 
   644 ;; Auto vars:     Size  Location     Type
   645 ;;		None
   646 ;; Return value:  Size  Location     Type
   647 ;;		None               void
   648 ;; Registers used:
   649 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   650 ;; Tracked objects:
   651 ;;		On entry : 0/0
   652 ;;		On exit  : 0/0
   653 ;;		Unchanged: 0/0
   654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   655 ;;      Params:         4       0       0       0
   656 ;;      Locals:         0       0       0       0
   657 ;;      Temps:          0       0       0       0
   658 ;;      Totals:         4       0       0       0
   659 ;;Total ram usage:        4 bytes
   660 ;; Hardware stack levels used:    1
   661 ;; Hardware stack levels required when called:    2
   662 ;; This function calls:
   663 ;;		_setMotorPWM
   664 ;; This function is called by:
   665 ;;		_main
   666 ;; This function uses a non-reentrant model
   667 ;;
   668                           
   669                           	psect	text4
   670  001C44                     __ptext4:
   671                           	opt stack 0
   672  001C44                     _stop:
   673                           	opt stack 28
   674                           
   675                           ;main.c: 86: while(m_L->power>0 || m_R->power>0){
   676                           
   677                           ;incstack = 0
   678  001C44  D028               	goto	l1011
   679  001C46                     l997:
   680                           
   681                           ;main.c: 87: if(m_L->power>0){
   682  001C46  C016  FFD9         	movff	stop@m_L,fsr2l
   683  001C4A  C017  FFDA         	movff	stop@m_L+1,fsr2h
   684  001C4E  50DF               	movf	indf2,w,c
   685  001C50  B4D8               	btfsc	status,2,c
   686  001C52  D005               	goto	l1001
   687                           
   688                           ;main.c: 88: m_L->power--;
   689  001C54  C016  FFD9         	movff	stop@m_L,fsr2l
   690  001C58  C017  FFDA         	movff	stop@m_L+1,fsr2h
   691  001C5C  06DF               	decf	indf2,f,c
   692  001C5E                     l1001:
   693                           
   694                           ;main.c: 89: }
   695                           ;main.c: 90: if(m_R->power>0){
   696  001C5E  C018  FFD9         	movff	stop@m_R,fsr2l
   697  001C62  C019  FFDA         	movff	stop@m_R+1,fsr2h
   698  001C66  50DF               	movf	indf2,w,c
   699  001C68  B4D8               	btfsc	status,2,c
   700  001C6A  D005               	goto	l1005
   701                           
   702                           ;main.c: 91: m_R->power--;
   703  001C6C  C018  FFD9         	movff	stop@m_R,fsr2l
   704  001C70  C019  FFDA         	movff	stop@m_R+1,fsr2h
   705  001C74  06DF               	decf	indf2,f,c
   706  001C76                     l1005:
   707                           
   708                           ;main.c: 92: }
   709                           ;main.c: 93: setMotorPWM(m_L);
   710  001C76  C016  F00F         	movff	stop@m_L,setMotorPWM@m
   711  001C7A  C017  F010         	movff	stop@m_L+1,setMotorPWM@m+1
   712  001C7E  EC3F  F00F         	call	_setMotorPWM	;wreg free
   713                           
   714                           ;main.c: 94: setMotorPWM(m_R);
   715  001C82  C018  F00F         	movff	stop@m_R,setMotorPWM@m
   716  001C86  C019  F010         	movff	stop@m_R+1,setMotorPWM@m+1
   717  001C8A  EC3F  F00F         	call	_setMotorPWM	;wreg free
   718                           
   719                           ;main.c: 95: _delay((unsigned long)((50)*(8000000/4000000.0)));
   720  001C8E  0E21               	movlw	33
   721  001C90                     u477:
   722  001C90  2EE8               	decfsz	wreg,f,c
   723  001C92  D7FE               	goto	u477
   724  001C94  F000               	nop	
   725  001C96                     l1011:
   726  001C96  C016  FFD9         	movff	stop@m_L,fsr2l
   727  001C9A  C017  FFDA         	movff	stop@m_L+1,fsr2h
   728  001C9E  50DF               	movf	indf2,w,c
   729  001CA0  A4D8               	btfss	status,2,c
   730  001CA2  D7D1               	goto	l997
   731  001CA4  C018  FFD9         	movff	stop@m_R,fsr2l
   732  001CA8  C019  FFDA         	movff	stop@m_R+1,fsr2h
   733  001CAC  50DF               	movf	indf2,w,c
   734  001CAE  B4D8               	btfsc	status,2,c
   735  001CB0  0012               	return	
   736  001CB2  D7C9               	goto	l997
   737  001CB4                     __end_of_stop:
   738                           	opt stack 0
   739                           wreg	equ	0xFE8
   740                           indf2	equ	0xFDF
   741                           fsr2h	equ	0xFDA
   742                           fsr2l	equ	0xFD9
   743                           status	equ	0xFD8
   744                           
   745 ;; *************** function _setMotorPWM *****************
   746 ;; Defined at:
   747 ;;		line 31 in file "main.c"
   748 ;; Parameters:    Size  Location     Type
   749 ;;  m               2   14[COMRAM] PTR struct DC_motor
   750 ;;		 -> main@motorR(9), main@motorL(9), 
   751 ;; Auto vars:     Size  Location     Type
   752 ;;  PWMduty         2   19[COMRAM] int 
   753 ;; Return value:  Size  Location     Type
   754 ;;		None               void
   755 ;; Registers used:
   756 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   757 ;; Tracked objects:
   758 ;;		On entry : 0/0
   759 ;;		On exit  : 0/0
   760 ;;		Unchanged: 0/0
   761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   762 ;;      Params:         2       0       0       0
   763 ;;      Locals:         2       0       0       0
   764 ;;      Temps:          3       0       0       0
   765 ;;      Totals:         7       0       0       0
   766 ;;Total ram usage:        7 bytes
   767 ;; Hardware stack levels used:    1
   768 ;; Hardware stack levels required when called:    1
   769 ;; This function calls:
   770 ;;		___awdiv
   771 ;;		___wmul
   772 ;; This function is called by:
   773 ;;		_fullSpeed
   774 ;;		_stop
   775 ;;		_setSingleMotorFullSpeed
   776 ;;		_stopSingleMotor
   777 ;; This function uses a non-reentrant model
   778 ;;
   779                           
   780                           	psect	text5
   781  001E7E                     __ptext5:
   782                           	opt stack 0
   783  001E7E                     _setMotorPWM:
   784                           	opt stack 27
   785                           
   786                           ;main.c: 33: int PWMduty;
   787                           ;main.c: 34: if (m->direction){
   788                           
   789                           ;incstack = 0
   790  001E7E  EE20 F001          	lfsr	2,1
   791  001E82  500F               	movf	setMotorPWM@m,w,c
   792  001E84  26D9               	addwf	fsr2l,f,c
   793  001E86  5010               	movf	setMotorPWM@m+1,w,c
   794  001E88  22DA               	addwfc	fsr2h,f,c
   795  001E8A  50DF               	movf	indf2,w,c
   796  001E8C  B4D8               	btfsc	status,2,c
   797  001E8E  D034               	goto	l963
   798                           
   799                           ;main.c: 36: PWMduty=m->PWMperiod - ((int)(m->power)*(m->PWMperiod))/100;
   800  001E90  EE20 F007          	lfsr	2,7
   801  001E94  500F               	movf	setMotorPWM@m,w,c
   802  001E96  26D9               	addwf	fsr2l,f,c
   803  001E98  5010               	movf	setMotorPWM@m+1,w,c
   804  001E9A  22DA               	addwfc	fsr2h,f,c
   805  001E9C  CFDE F011          	movff	postinc2,??_setMotorPWM
   806  001EA0  CFDD F012          	movff	postdec2,??_setMotorPWM+1
   807  001EA4  C00F  FFD9         	movff	setMotorPWM@m,fsr2l
   808  001EA8  C010  FFDA         	movff	setMotorPWM@m+1,fsr2h
   809  001EAC  50DF               	movf	indf2,w,c
   810  001EAE  6E13               	movwf	(??_setMotorPWM+2)& (0+255),c
   811  001EB0  5013               	movf	??_setMotorPWM+2,w,c
   812  001EB2  6E01               	movwf	___wmul@multiplier,c
   813  001EB4  6A02               	clrf	___wmul@multiplier+1,c
   814  001EB6  EE20 F007          	lfsr	2,7
   815  001EBA  500F               	movf	setMotorPWM@m,w,c
   816  001EBC  26D9               	addwf	fsr2l,f,c
   817  001EBE  5010               	movf	setMotorPWM@m+1,w,c
   818  001EC0  22DA               	addwfc	fsr2h,f,c
   819  001EC2  CFDE F003          	movff	postinc2,___wmul@multiplicand
   820  001EC6  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
   821  001ECA  EC96  F00D         	call	___wmul	;wreg free
   822  001ECE  C001  F007         	movff	?___wmul,___awdiv@dividend
   823  001ED2  C002  F008         	movff	?___wmul+1,___awdiv@dividend+1
   824  001ED6  0E00               	movlw	0
   825  001ED8  6E0A               	movwf	___awdiv@divisor+1,c
   826  001EDA  0E64               	movlw	100
   827  001EDC  6E09               	movwf	___awdiv@divisor,c
   828  001EDE  EC92  F00E         	call	___awdiv	;wreg free
   829  001EE2  1E07               	comf	?___awdiv,f,c
   830  001EE4  1E08               	comf	?___awdiv+1,f,c
   831  001EE6  4A07               	infsnz	?___awdiv,f,c
   832  001EE8  2A08               	incf	?___awdiv+1,f,c
   833  001EEA  5011               	movf	??_setMotorPWM,w,c
   834  001EEC  2407               	addwf	?___awdiv,w,c
   835  001EEE  6E14               	movwf	setMotorPWM@PWMduty,c
   836  001EF0  5012               	movf	??_setMotorPWM+1,w,c
   837  001EF2  2008               	addwfc	?___awdiv+1,w,c
   838  001EF4  6E15               	movwf	setMotorPWM@PWMduty+1,c
   839                           
   840                           ;main.c: 37: }
   841  001EF6  D023               	goto	l965
   842  001EF8                     l963:
   843                           
   844                           ;main.c: 38: else {
   845                           ;main.c: 40: PWMduty=((int)(m->power)*(m->PWMperiod))/100;
   846  001EF8  C00F  FFD9         	movff	setMotorPWM@m,fsr2l
   847  001EFC  C010  FFDA         	movff	setMotorPWM@m+1,fsr2h
   848  001F00  50DF               	movf	indf2,w,c
   849  001F02  6E11               	movwf	??_setMotorPWM& (0+255),c
   850  001F04  5011               	movf	??_setMotorPWM,w,c
   851  001F06  6E01               	movwf	___wmul@multiplier,c
   852  001F08  6A02               	clrf	___wmul@multiplier+1,c
   853  001F0A  EE20 F007          	lfsr	2,7
   854  001F0E  500F               	movf	setMotorPWM@m,w,c
   855  001F10  26D9               	addwf	fsr2l,f,c
   856  001F12  5010               	movf	setMotorPWM@m+1,w,c
   857  001F14  22DA               	addwfc	fsr2h,f,c
   858  001F16  CFDE F003          	movff	postinc2,___wmul@multiplicand
   859  001F1A  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
   860  001F1E  EC96  F00D         	call	___wmul	;wreg free
   861  001F22  C001  F007         	movff	?___wmul,___awdiv@dividend
   862  001F26  C002  F008         	movff	?___wmul+1,___awdiv@dividend+1
   863  001F2A  0E00               	movlw	0
   864  001F2C  6E0A               	movwf	___awdiv@divisor+1,c
   865  001F2E  0E64               	movlw	100
   866  001F30  6E09               	movwf	___awdiv@divisor,c
   867  001F32  EC92  F00E         	call	___awdiv	;wreg free
   868  001F36  C007  F014         	movff	?___awdiv,setMotorPWM@PWMduty
   869  001F3A  C008  F015         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
   870  001F3E                     l965:
   871                           
   872                           ;main.c: 41: }
   873                           ;main.c: 42: PWMduty = (PWMduty << 2);
   874  001F3E  C014  F011         	movff	setMotorPWM@PWMduty,??_setMotorPWM
   875  001F42  C015  F012         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+1
   876  001F46  90D8               	bcf	status,0,c
   877  001F48  3611               	rlcf	??_setMotorPWM,f,c
   878  001F4A  3612               	rlcf	??_setMotorPWM+1,f,c
   879  001F4C  90D8               	bcf	status,0,c
   880  001F4E  3611               	rlcf	??_setMotorPWM,f,c
   881  001F50  3612               	rlcf	??_setMotorPWM+1,f,c
   882  001F52  C011  F014         	movff	??_setMotorPWM,setMotorPWM@PWMduty
   883  001F56  C012  F015         	movff	??_setMotorPWM+1,setMotorPWM@PWMduty+1
   884                           
   885                           ;main.c: 43: *(m->dutyLowByte) = PWMduty & 0xFF;
   886  001F5A  EE20 F002          	lfsr	2,2
   887  001F5E  500F               	movf	setMotorPWM@m,w,c
   888  001F60  26D9               	addwf	fsr2l,f,c
   889  001F62  5010               	movf	setMotorPWM@m+1,w,c
   890  001F64  22DA               	addwfc	fsr2h,f,c
   891  001F66  CFDE F011          	movff	postinc2,??_setMotorPWM
   892  001F6A  CFDD F012          	movff	postdec2,??_setMotorPWM+1
   893  001F6E  C011  FFD9         	movff	??_setMotorPWM,fsr2l
   894  001F72  C012  FFDA         	movff	??_setMotorPWM+1,fsr2h
   895  001F76  C014  FFDF         	movff	setMotorPWM@PWMduty,indf2
   896                           
   897                           ;main.c: 44: *(m->dutyHighByte) = (PWMduty >> 8) & 0x3F;
   898  001F7A  EE20 F004          	lfsr	2,4
   899  001F7E  500F               	movf	setMotorPWM@m,w,c
   900  001F80  26D9               	addwf	fsr2l,f,c
   901  001F82  5010               	movf	setMotorPWM@m+1,w,c
   902  001F84  22DA               	addwfc	fsr2h,f,c
   903  001F86  CFDE F011          	movff	postinc2,??_setMotorPWM
   904  001F8A  CFDD F012          	movff	postdec2,??_setMotorPWM+1
   905  001F8E  C011  FFD9         	movff	??_setMotorPWM,fsr2l
   906  001F92  C012  FFDA         	movff	??_setMotorPWM+1,fsr2h
   907  001F96  5015               	movf	setMotorPWM@PWMduty+1,w,c
   908  001F98  0B3F               	andlw	63
   909  001F9A  6EDF               	movwf	indf2,c
   910                           
   911                           ;main.c: 46: if (m->direction){
   912  001F9C  EE20 F001          	lfsr	2,1
   913  001FA0  500F               	movf	setMotorPWM@m,w,c
   914  001FA2  26D9               	addwf	fsr2l,f,c
   915  001FA4  5010               	movf	setMotorPWM@m+1,w,c
   916  001FA6  22DA               	addwfc	fsr2h,f,c
   917  001FA8  50DF               	movf	indf2,w,c
   918  001FAA  B4D8               	btfsc	status,2,c
   919  001FAC  D014               	goto	l975
   920                           
   921                           ;main.c: 47: LATB=LATB | (1<<(m->dir_pin));
   922  001FAE  EE20 F006          	lfsr	2,6
   923  001FB2  500F               	movf	setMotorPWM@m,w,c
   924  001FB4  26D9               	addwf	fsr2l,f,c
   925  001FB6  5010               	movf	setMotorPWM@m+1,w,c
   926  001FB8  22DA               	addwfc	fsr2h,f,c
   927  001FBA  50DF               	movf	indf2,w,c
   928  001FBC  6E11               	movwf	??_setMotorPWM& (0+255),c
   929  001FBE  0E01               	movlw	1
   930  001FC0  6E12               	movwf	(??_setMotorPWM+1)& (0+255),c
   931  001FC2  2A11               	incf	??_setMotorPWM,f,c
   932  001FC4  D002               	goto	u334
   933  001FC6                     u335:
   934  001FC6  90D8               	bcf	status,0,c
   935  001FC8  3612               	rlcf	??_setMotorPWM+1,f,c
   936  001FCA                     u334:
   937  001FCA  2E11               	decfsz	??_setMotorPWM,f,c
   938  001FCC  D7FC               	goto	u335
   939  001FCE  5012               	movf	??_setMotorPWM+1,w,c
   940  001FD0  108A               	iorwf	3978,w,c	;volatile
   941  001FD2  6E8A               	movwf	3978,c	;volatile
   942                           
   943                           ;main.c: 48: } else {
   944  001FD4  0012               	return	
   945  001FD6                     l975:
   946                           
   947                           ;main.c: 49: LATB=LATB & (~(1<<(m->dir_pin)));
   948  001FD6  EE20 F006          	lfsr	2,6
   949  001FDA  500F               	movf	setMotorPWM@m,w,c
   950  001FDC  26D9               	addwf	fsr2l,f,c
   951  001FDE  5010               	movf	setMotorPWM@m+1,w,c
   952  001FE0  22DA               	addwfc	fsr2h,f,c
   953  001FE2  50DF               	movf	indf2,w,c
   954  001FE4  6E11               	movwf	??_setMotorPWM& (0+255),c
   955  001FE6  0E01               	movlw	1
   956  001FE8  6E12               	movwf	(??_setMotorPWM+1)& (0+255),c
   957  001FEA  2A11               	incf	??_setMotorPWM,f,c
   958  001FEC  D002               	goto	u344
   959  001FEE                     u345:
   960  001FEE  90D8               	bcf	status,0,c
   961  001FF0  3612               	rlcf	??_setMotorPWM+1,f,c
   962  001FF2                     u344:
   963  001FF2  2E11               	decfsz	??_setMotorPWM,f,c
   964  001FF4  D7FC               	goto	u345
   965  001FF6  5012               	movf	??_setMotorPWM+1,w,c
   966  001FF8  0AFF               	xorlw	255
   967  001FFA  148A               	andwf	3978,w,c	;volatile
   968  001FFC  6E8A               	movwf	3978,c	;volatile
   969  001FFE  0012               	return	
   970  002000                     __end_of_setMotorPWM:
   971                           	opt stack 0
   972                           wreg	equ	0xFE8
   973                           indf2	equ	0xFDF
   974                           postinc2	equ	0xFDE
   975                           postdec2	equ	0xFDD
   976                           fsr2h	equ	0xFDA
   977                           fsr2l	equ	0xFD9
   978                           status	equ	0xFD8
   979                           
   980 ;; *************** function ___wmul *****************
   981 ;; Defined at:
   982 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
   983 ;; Parameters:    Size  Location     Type
   984 ;;  multiplier      2    0[COMRAM] unsigned int 
   985 ;;  multiplicand    2    2[COMRAM] unsigned int 
   986 ;; Auto vars:     Size  Location     Type
   987 ;;  product         2    4[COMRAM] unsigned int 
   988 ;; Return value:  Size  Location     Type
   989 ;;                  2    0[COMRAM] unsigned int 
   990 ;; Registers used:
   991 ;;		wreg, status,2, status,0, prodl, prodh
   992 ;; Tracked objects:
   993 ;;		On entry : 0/0
   994 ;;		On exit  : 0/0
   995 ;;		Unchanged: 0/0
   996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   997 ;;      Params:         4       0       0       0
   998 ;;      Locals:         2       0       0       0
   999 ;;      Temps:          0       0       0       0
  1000 ;;      Totals:         6       0       0       0
  1001 ;;Total ram usage:        6 bytes
  1002 ;; Hardware stack levels used:    1
  1003 ;; This function calls:
  1004 ;;		Nothing
  1005 ;; This function is called by:
  1006 ;;		_setMotorPWM
  1007 ;; This function uses a non-reentrant model
  1008 ;;
  1009                           
  1010                           	psect	text6
  1011  001B2C                     __ptext6:
  1012                           	opt stack 0
  1013  001B2C                     ___wmul:
  1014                           	opt stack 27
  1015                           
  1016                           ;incstack = 0
  1017  001B2C  5001               	movf	___wmul@multiplier,w,c
  1018  001B2E  0203               	mulwf	___wmul@multiplicand,c
  1019  001B30  CFF3 F005          	movff	prodl,___wmul@product
  1020  001B34  CFF4 F006          	movff	prodh,___wmul@product+1
  1021  001B38  5001               	movf	___wmul@multiplier,w,c
  1022  001B3A  0204               	mulwf	___wmul@multiplicand+1,c
  1023  001B3C  50F3               	movf	prodl,w,c
  1024  001B3E  2606               	addwf	___wmul@product+1,f,c
  1025  001B40  5002               	movf	___wmul@multiplier+1,w,c
  1026  001B42  0203               	mulwf	___wmul@multiplicand,c
  1027  001B44  50F3               	movf	prodl,w,c
  1028  001B46  2606               	addwf	___wmul@product+1,f,c
  1029  001B48  C005  F001         	movff	___wmul@product,?___wmul
  1030  001B4C  C006  F002         	movff	___wmul@product+1,?___wmul+1
  1031  001B50  0012               	return	
  1032  001B52                     __end_of___wmul:
  1033                           	opt stack 0
  1034                           prodh	equ	0xFF4
  1035                           prodl	equ	0xFF3
  1036                           wreg	equ	0xFE8
  1037                           indf2	equ	0xFDF
  1038                           postinc2	equ	0xFDE
  1039                           postdec2	equ	0xFDD
  1040                           fsr2h	equ	0xFDA
  1041                           fsr2l	equ	0xFD9
  1042                           status	equ	0xFD8
  1043                           
  1044 ;; *************** function ___awdiv *****************
  1045 ;; Defined at:
  1046 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  1047 ;; Parameters:    Size  Location     Type
  1048 ;;  dividend        2    6[COMRAM] int 
  1049 ;;  divisor         2    8[COMRAM] int 
  1050 ;; Auto vars:     Size  Location     Type
  1051 ;;  quotient        2   12[COMRAM] int 
  1052 ;;  sign            1   11[COMRAM] unsigned char 
  1053 ;;  counter         1   10[COMRAM] unsigned char 
  1054 ;; Return value:  Size  Location     Type
  1055 ;;                  2    6[COMRAM] int 
  1056 ;; Registers used:
  1057 ;;		wreg, status,2, status,0
  1058 ;; Tracked objects:
  1059 ;;		On entry : 0/0
  1060 ;;		On exit  : 0/0
  1061 ;;		Unchanged: 0/0
  1062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1063 ;;      Params:         4       0       0       0
  1064 ;;      Locals:         4       0       0       0
  1065 ;;      Temps:          0       0       0       0
  1066 ;;      Totals:         8       0       0       0
  1067 ;;Total ram usage:        8 bytes
  1068 ;; Hardware stack levels used:    1
  1069 ;; This function calls:
  1070 ;;		Nothing
  1071 ;; This function is called by:
  1072 ;;		_setMotorPWM
  1073 ;; This function uses a non-reentrant model
  1074 ;;
  1075                           
  1076                           	psect	text7
  1077  001D24                     __ptext7:
  1078                           	opt stack 0
  1079  001D24                     ___awdiv:
  1080                           	opt stack 27
  1081                           
  1082                           ;incstack = 0
  1083  001D24  0E00               	movlw	0
  1084  001D26  6E0C               	movwf	___awdiv@sign,c
  1085  001D28  AE0A               	btfss	___awdiv@divisor+1,7,c
  1086  001D2A  D006               	goto	l923
  1087  001D2C  6C09               	negf	___awdiv@divisor,c
  1088  001D2E  1E0A               	comf	___awdiv@divisor+1,f,c
  1089  001D30  B0D8               	btfsc	status,0,c
  1090  001D32  2A0A               	incf	___awdiv@divisor+1,f,c
  1091  001D34  0E01               	movlw	1
  1092  001D36  6E0C               	movwf	___awdiv@sign,c
  1093  001D38                     l923:
  1094  001D38  AE08               	btfss	___awdiv@dividend+1,7,c
  1095  001D3A  D006               	goto	l929
  1096  001D3C  6C07               	negf	___awdiv@dividend,c
  1097  001D3E  1E08               	comf	___awdiv@dividend+1,f,c
  1098  001D40  B0D8               	btfsc	status,0,c
  1099  001D42  2A08               	incf	___awdiv@dividend+1,f,c
  1100  001D44  0E01               	movlw	1
  1101  001D46  1A0C               	xorwf	___awdiv@sign,f,c
  1102  001D48                     l929:
  1103  001D48  0E00               	movlw	0
  1104  001D4A  6E0E               	movwf	___awdiv@quotient+1,c
  1105  001D4C  0E00               	movlw	0
  1106  001D4E  6E0D               	movwf	___awdiv@quotient,c
  1107  001D50  5009               	movf	___awdiv@divisor,w,c
  1108  001D52  100A               	iorwf	___awdiv@divisor+1,w,c
  1109  001D54  B4D8               	btfsc	status,2,c
  1110  001D56  D01C               	goto	l951
  1111  001D58  0E01               	movlw	1
  1112  001D5A  6E0B               	movwf	___awdiv@counter,c
  1113  001D5C  D004               	goto	l937
  1114  001D5E                     l935:
  1115  001D5E  90D8               	bcf	status,0,c
  1116  001D60  3609               	rlcf	___awdiv@divisor,f,c
  1117  001D62  360A               	rlcf	___awdiv@divisor+1,f,c
  1118  001D64  2A0B               	incf	___awdiv@counter,f,c
  1119  001D66                     l937:
  1120  001D66  AE0A               	btfss	___awdiv@divisor+1,7,c
  1121  001D68  D7FA               	goto	l935
  1122  001D6A                     l939:
  1123  001D6A  90D8               	bcf	status,0,c
  1124  001D6C  360D               	rlcf	___awdiv@quotient,f,c
  1125  001D6E  360E               	rlcf	___awdiv@quotient+1,f,c
  1126  001D70  5009               	movf	___awdiv@divisor,w,c
  1127  001D72  5C07               	subwf	___awdiv@dividend,w,c
  1128  001D74  500A               	movf	___awdiv@divisor+1,w,c
  1129  001D76  5808               	subwfb	___awdiv@dividend+1,w,c
  1130  001D78  A0D8               	btfss	status,0,c
  1131  001D7A  D005               	goto	l947
  1132  001D7C  5009               	movf	___awdiv@divisor,w,c
  1133  001D7E  5E07               	subwf	___awdiv@dividend,f,c
  1134  001D80  500A               	movf	___awdiv@divisor+1,w,c
  1135  001D82  5A08               	subwfb	___awdiv@dividend+1,f,c
  1136  001D84  800D               	bsf	___awdiv@quotient,0,c
  1137  001D86                     l947:
  1138  001D86  90D8               	bcf	status,0,c
  1139  001D88  320A               	rrcf	___awdiv@divisor+1,f,c
  1140  001D8A  3209               	rrcf	___awdiv@divisor,f,c
  1141  001D8C  2E0B               	decfsz	___awdiv@counter,f,c
  1142  001D8E  D7ED               	goto	l939
  1143  001D90                     l951:
  1144  001D90  500C               	movf	___awdiv@sign,w,c
  1145  001D92  B4D8               	btfsc	status,2,c
  1146  001D94  D004               	goto	l955
  1147  001D96  6C0D               	negf	___awdiv@quotient,c
  1148  001D98  1E0E               	comf	___awdiv@quotient+1,f,c
  1149  001D9A  B0D8               	btfsc	status,0,c
  1150  001D9C  2A0E               	incf	___awdiv@quotient+1,f,c
  1151  001D9E                     l955:
  1152  001D9E  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  1153  001DA2  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  1154  001DA6  0012               	return	
  1155  001DA8                     __end_of___awdiv:
  1156                           	opt stack 0
  1157                           prodh	equ	0xFF4
  1158                           prodl	equ	0xFF3
  1159                           wreg	equ	0xFE8
  1160                           indf2	equ	0xFDF
  1161                           postinc2	equ	0xFDE
  1162                           postdec2	equ	0xFDD
  1163                           fsr2h	equ	0xFDA
  1164                           fsr2l	equ	0xFD9
  1165                           status	equ	0xFD8
  1166                           
  1167 ;; *************** function _initPWM *****************
  1168 ;; Defined at:
  1169 ;;		line 15 in file "main.c"
  1170 ;; Parameters:    Size  Location     Type
  1171 ;;		None
  1172 ;; Auto vars:     Size  Location     Type
  1173 ;;		None
  1174 ;; Return value:  Size  Location     Type
  1175 ;;		None               void
  1176 ;; Registers used:
  1177 ;;		wreg, status,2
  1178 ;; Tracked objects:
  1179 ;;		On entry : 0/0
  1180 ;;		On exit  : 0/0
  1181 ;;		Unchanged: 0/0
  1182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1183 ;;      Params:         0       0       0       0
  1184 ;;      Locals:         0       0       0       0
  1185 ;;      Temps:          0       0       0       0
  1186 ;;      Totals:         0       0       0       0
  1187 ;;Total ram usage:        0 bytes
  1188 ;; Hardware stack levels used:    1
  1189 ;; This function calls:
  1190 ;;		Nothing
  1191 ;; This function is called by:
  1192 ;;		_main
  1193 ;; This function uses a non-reentrant model
  1194 ;;
  1195                           
  1196                           	psect	text8
  1197  001B52                     __ptext8:
  1198                           	opt stack 0
  1199  001B52                     _initPWM:
  1200                           	opt stack 30
  1201                           
  1202                           ;main.c: 16: PTCON0 = 0b00000000;
  1203                           
  1204                           ;incstack = 0
  1205  001B52  0E00               	movlw	0
  1206  001B54  6E7F               	movwf	3967,c	;volatile
  1207                           
  1208                           ;main.c: 17: PTCON1 = 0b10000000;
  1209  001B56  0E80               	movlw	128
  1210  001B58  6E7E               	movwf	3966,c	;volatile
  1211                           
  1212                           ;main.c: 18: PWMCON0 = 0b01101111;
  1213  001B5A  0E6F               	movlw	111
  1214  001B5C  6E6F               	movwf	3951,c	;volatile
  1215                           
  1216                           ;main.c: 19: PWMCON1 = 0x00;
  1217  001B5E  0E00               	movlw	0
  1218  001B60  6E6E               	movwf	3950,c	;volatile
  1219                           
  1220                           ;main.c: 21: PTPERL = 0b11000111;
  1221  001B62  0EC7               	movlw	199
  1222  001B64  6E7B               	movwf	3963,c	;volatile
  1223                           
  1224                           ;main.c: 22: PTPERH = 0b00000000;
  1225  001B66  0E00               	movlw	0
  1226  001B68  6E7A               	movwf	3962,c	;volatile
  1227                           
  1228                           ;main.c: 23: PDC0L = 0<<2;
  1229  001B6A  0E00               	movlw	0
  1230  001B6C  6E79               	movwf	3961,c	;volatile
  1231                           
  1232                           ;main.c: 24: PDC0H = 0>>6;
  1233  001B6E  0E00               	movlw	0
  1234  001B70  6E78               	movwf	3960,c	;volatile
  1235                           
  1236                           ;main.c: 25: PDC1L = 0<<2;
  1237  001B72  0E00               	movlw	0
  1238  001B74  6E77               	movwf	3959,c	;volatile
  1239                           
  1240                           ;main.c: 26: PDC1H = 0>>6;
  1241  001B76  0E00               	movlw	0
  1242  001B78  6E76               	movwf	3958,c	;volatile
  1243  001B7A  0012               	return		;funcret
  1244  001B7C                     __end_of_initPWM:
  1245                           	opt stack 0
  1246                           prodh	equ	0xFF4
  1247                           prodl	equ	0xFF3
  1248                           wreg	equ	0xFE8
  1249                           indf2	equ	0xFDF
  1250                           postinc2	equ	0xFDE
  1251                           postdec2	equ	0xFDD
  1252                           fsr2h	equ	0xFDA
  1253                           fsr2l	equ	0xFD9
  1254                           status	equ	0xFD8
  1255                           
  1256 ;; *************** function _delay_s *****************
  1257 ;; Defined at:
  1258 ;;		line 116 in file "main.c"
  1259 ;; Parameters:    Size  Location     Type
  1260 ;;  seconds         1    wreg     unsigned char 
  1261 ;; Auto vars:     Size  Location     Type
  1262 ;;  seconds         1    2[COMRAM] unsigned char 
  1263 ;;  j               2    5[COMRAM] unsigned int 
  1264 ;;  i               2    3[COMRAM] unsigned int 
  1265 ;; Return value:  Size  Location     Type
  1266 ;;		None               void
  1267 ;; Registers used:
  1268 ;;		wreg, status,2, status,0
  1269 ;; Tracked objects:
  1270 ;;		On entry : 0/0
  1271 ;;		On exit  : 0/0
  1272 ;;		Unchanged: 0/0
  1273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1274 ;;      Params:         0       0       0       0
  1275 ;;      Locals:         5       0       0       0
  1276 ;;      Temps:          2       0       0       0
  1277 ;;      Totals:         7       0       0       0
  1278 ;;Total ram usage:        7 bytes
  1279 ;; Hardware stack levels used:    1
  1280 ;; This function calls:
  1281 ;;		Nothing
  1282 ;; This function is called by:
  1283 ;;		_main
  1284 ;; This function uses a non-reentrant model
  1285 ;;
  1286                           
  1287                           	psect	text9
  1288  001BE8                     __ptext9:
  1289                           	opt stack 0
  1290  001BE8                     _delay_s:
  1291                           	opt stack 30
  1292                           
  1293                           ;incstack = 0
  1294                           ;delay_s@seconds stored from wreg
  1295  001BE8  6E03               	movwf	delay_s@seconds,c
  1296                           
  1297                           ;main.c: 117: unsigned int i=0;
  1298  001BEA  0E00               	movlw	0
  1299  001BEC  6E05               	movwf	delay_s@i+1,c
  1300  001BEE  0E00               	movlw	0
  1301  001BF0  6E04               	movwf	delay_s@i,c
  1302                           
  1303                           ;main.c: 118: unsigned int j=0;
  1304  001BF2  0E00               	movlw	0
  1305  001BF4  6E07               	movwf	delay_s@j+1,c
  1306  001BF6  0E00               	movlw	0
  1307  001BF8  6E06               	movwf	delay_s@j,c
  1308                           
  1309                           ;main.c: 119: for (i=1; i<=seconds; i++) {
  1310  001BFA  0E00               	movlw	0
  1311  001BFC  6E05               	movwf	delay_s@i+1,c
  1312  001BFE  0E01               	movlw	1
  1313  001C00  6E04               	movwf	delay_s@i,c
  1314  001C02  D016               	goto	l845
  1315  001C04                     l833:
  1316                           
  1317                           ;main.c: 120: for (j=1; j<=20; j++) {
  1318  001C04  0E00               	movlw	0
  1319  001C06  6E07               	movwf	delay_s@j+1,c
  1320  001C08  0E01               	movlw	1
  1321  001C0A  6E06               	movwf	delay_s@j,c
  1322  001C0C                     l835:
  1323  001C0C  5007               	movf	delay_s@j+1,w,c
  1324  001C0E  E10E               	bnz	l843
  1325  001C10  0E15               	movlw	21
  1326  001C12  5C06               	subwf	delay_s@j,w,c
  1327  001C14  B0D8               	btfsc	status,0,c
  1328  001C16  D00A               	goto	l843
  1329                           
  1330                           ;main.c: 121: _delay((unsigned long)((50)*(8000000/4000.0)));
  1331  001C18  0E82               	movlw	130
  1332  001C1A  6E01               	movwf	??_delay_s& (0+255),c
  1333  001C1C  0EDE               	movlw	222
  1334  001C1E                     u487:
  1335  001C1E  2EE8               	decfsz	wreg,f,c
  1336  001C20  D7FE               	goto	u487
  1337  001C22  2E01               	decfsz	??_delay_s& (0+255),f,c
  1338  001C24  D7FC               	goto	u487
  1339  001C26  4A06               	infsnz	delay_s@j,f,c
  1340  001C28  2A07               	incf	delay_s@j+1,f,c
  1341  001C2A  D7F0               	goto	l835
  1342  001C2C                     l843:
  1343  001C2C  4A04               	infsnz	delay_s@i,f,c
  1344  001C2E  2A05               	incf	delay_s@i+1,f,c
  1345  001C30                     l845:
  1346  001C30  5003               	movf	delay_s@seconds,w,c
  1347  001C32  6E01               	movwf	??_delay_s& (0+255),c
  1348  001C34  6A02               	clrf	(??_delay_s+1)& (0+255),c
  1349  001C36  5004               	movf	delay_s@i,w,c
  1350  001C38  5C01               	subwf	??_delay_s,w,c
  1351  001C3A  5005               	movf	delay_s@i+1,w,c
  1352  001C3C  5802               	subwfb	??_delay_s+1,w,c
  1353  001C3E  A0D8               	btfss	status,0,c
  1354  001C40  0012               	return	
  1355  001C42  D7E0               	goto	l833
  1356  001C44                     __end_of_delay_s:
  1357                           	opt stack 0
  1358  0000                     prodh	equ	0xFF4
  1359                           prodl	equ	0xFF3
  1360                           wreg	equ	0xFE8
  1361                           indf2	equ	0xFDF
  1362                           postinc2	equ	0xFDE
  1363                           postdec2	equ	0xFDD
  1364                           fsr2h	equ	0xFDA
  1365                           fsr2l	equ	0xFD9
  1366                           status	equ	0xFD8
  1367                           prodh	equ	0xFF4
  1368                           prodl	equ	0xFF3
  1369                           wreg	equ	0xFE8
  1370                           indf2	equ	0xFDF
  1371                           postinc2	equ	0xFDE
  1372                           postdec2	equ	0xFDD
  1373                           fsr2h	equ	0xFDA
  1374                           fsr2l	equ	0xFD9
  1375                           status	equ	0xFD8
  1376                           
  1377                           	psect	rparam
  1378  0000                     prodh	equ	0xFF4
  1379                           prodl	equ	0xFF3
  1380                           wreg	equ	0xFE8
  1381                           indf2	equ	0xFDF
  1382                           postinc2	equ	0xFDE
  1383                           postdec2	equ	0xFDD
  1384                           fsr2h	equ	0xFDA
  1385                           fsr2l	equ	0xFD9
  1386                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     48      48
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@m_R.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@m_R.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@m_R	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    turnRight@m_L.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@m_L.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@m_L	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    turnLeft@m_R.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@m_R.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@m_R	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    turnLeft@m_L.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@m_L.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@m_L	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    stop@m_R.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@m_R.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@m_R	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    stop@m_L.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@m_L.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@m_L	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    fullSpeed@m_R.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeed@m_R.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeed@m_R	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    fullSpeed@m_L.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeed@m_L.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeed@m_L	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    stopSingleMotor@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stopSingleMotor@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setSingleMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setSingleMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S31DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S31DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), main@motorL(COMRAM[9]), 


Critical Paths under _main in COMRAM

    _main->_turnLeft
    _main->_turnRight
    _turnRight->_fullSpeed
    _turnLeft->_fullSpeed
    _fullSpeed->_setMotorPWM
    _stop->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                18    18      0    9060
                                             30 COMRAM    18    18      0
                            _delay_s
                          _fullSpeed
                            _initPWM
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _turnRight                                            4     0      4    2306
                                             26 COMRAM     4     0      4
                          _fullSpeed
 ---------------------------------------------------------------------------------
 (1) _turnLeft                                             4     0      4    2306
                                             26 COMRAM     4     0      4
                          _fullSpeed
 ---------------------------------------------------------------------------------
 (2) _fullSpeed                                            5     1      4    2090
                                             21 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _stop                                                 4     0      4    1834
                                             21 COMRAM     4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          7     5      2    1530
                                             14 COMRAM     7     5      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     347
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     488
                                              6 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _initPWM                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _delay_s                                              7     7      0      60
                                              0 COMRAM     7     7      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _delay_s
   _fullSpeed
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _initPWM
   _stop
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _turnLeft
     _fullSpeed
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _turnRight
     _fullSpeed
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F     30      30       1       50.5%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BIGRAM             2FF      0       0      10        0.0%
DATA                 0      0       0      11        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Tue Feb 27 11:55:05 2018

                     l65 1D06                       l95 1DAC             ___awdiv@sign 000C  
    ___wmul@multiplicand 0003                      l833 1C04                      l843 1C2C  
                    l835 1C0C                      l923 1D38                      l845 1C30  
                    l935 1D5E                      l951 1D90                      l937 1D66  
                    l929 1D48                      l955 1D9E                      l947 1D86  
                    l939 1D6A                      l963 1EF8                      l965 1F3E  
                    l975 1FD6                      l983 1CCE                      l987 1CE6  
                    l979 1CB6                      l997 1C46                      u334 1FCA  
                    u335 1FC6                      u344 1FF2                      u345 1FEE  
                    u467 1D00                      u477 1C90                      u487 1C1E  
                    wreg 000FE8                     l1001 1C5E                     l1011 1C96  
                   l1005 1C76                     l1069 1E14                     _LATB 000F8A  
                   _main 1DA8                     fsr2h 000FDA                     indf2 000FDF  
                   fsr2l 000FD9                     _stop 1C44                     prodh 000FF4  
                   prodl 000FF3                     start 0000           delay_s@seconds 0003  
           ___param_bank 000010                    ?_main 0001          __end_of___awdiv 1DA8  
                  ?_stop 0016          ___awdiv@divisor 0009                    _PDC0H 000F78  
                  _PDC1H 000F76                    _PDC0L 000F79                    _PDC1L 000F77  
        ___awdiv@counter 000B          __end_of_delay_s 1C44          __end_of_initPWM 1B7C  
                  status 000FD8          __initialization 1B26             __end_of_main 1E7E  
           __end_of_stop 1CB4           __CFG_OSC$IRCIO 000000                   ??_main 001F  
                 ??_stop 001A            __activetblptr 000000             ?_setMotorPWM 000F  
                 _ADCON0 000FC2                   _ADCON1 000FC1                   _ADCON2 000FC0  
       ___awdiv@dividend 0007           __CFG_WDTEN$OFF 000000                   _OSCCON 000FD3  
                 _PTCON0 000F7F                   _PTCON1 000F7E                   _PTPERH 000F7A  
                 _PTPERL 000F7B                   ___wmul 1B2C                ??___awdiv 000B  
       ___awdiv@quotient 000D                ??_delay_s 0001                ??_initPWM 0001  
       __end_of_turnLeft 1BB2               __accesstop 0060  __end_of__initialization 1B26  
          ___rparam_used 000001           __pcstackCOMRAM 0001       __size_of_fullSpeed 0070  
                ?___wmul 0001                  _PWMCON0 000F6F                  _PWMCON1 000F6E  
   __size_of_setMotorPWM 0182       __size_of_turnRight 0036                  __Hparam 0000  
                __Lparam 0000             fullSpeed@m_L 0016             fullSpeed@m_R 0018  
                ___awdiv 1D24          __size_of___wmul 0026                  __pcinit 1B26  
                _delay_s 1BE8                  __ramtop 0300                ?_turnLeft 001B  
                __ptext0 1DA8                  __ptext1 1BB2                  __ptext2 1B7C  
                __ptext3 1CB4                  __ptext4 1C44                  __ptext5 1E7E  
                __ptext6 1B2C                  __ptext7 1D24                  __ptext8 1B52  
                __ptext9 1BE8                  _initPWM 1B52        __end_of_fullSpeed 1D24  
   end_of_initialization 1B26       setMotorPWM@PWMduty 0014             turnRight@m_L 001B  
           turnRight@m_R 001D                  postdec2 000FDD                  postinc2 000FDE  
                stop@m_L 0016                  stop@m_R 0018               ??_turnLeft 001F  
      __end_of_turnRight 1BE8                _TRISAbits 000F92                _TRISBbits 000F93  
             main@motorL 001F               main@motorR 0028           __end_of___wmul 1B52  
    start_initialization 1B26                 ??___wmul 0005                 ?___awdiv 0007  
               ?_delay_s 0001                 ?_initPWM 0001        __size_of_turnLeft 0036  
          ??_setMotorPWM 0011                _fullSpeed 1CB4              turnLeft@m_L 001B  
            turnLeft@m_R 001D           ___wmul@product 0005        ___wmul@multiplier 0001  
           setMotorPWM@m 000F                _turnRight 1BB2               ?_fullSpeed 0016  
    __end_of_setMotorPWM 2000                 __Hrparam 0000                 __Lrparam 0000  
       __size_of___awdiv 0084               _ANSEL0bits 000FB8         __size_of_delay_s 005C  
       __size_of_initPWM 002A               ?_turnRight 001B            __size_of_main 00D6  
          __size_of_stop 0070                 delay_s@i 0004                 delay_s@j 0006  
               _turnLeft 1B7C              ??_fullSpeed 001A              _setMotorPWM 1E7E  
             _OSCCONbits 000FD3              ??_turnRight 001F  
